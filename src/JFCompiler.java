import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.Arrays;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.*;
import javax.swing.JOptionPane;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.*;
import javax.swing.filechooser.FileFilter;


public class JFCompiler extends javax.swing.JFrame{

    JFileChooser seleccionArchivo = new JFileChooser();
    Integer cantidadLineas=0, actual=0;
    String numerosDeLinea="", MensajesErrores="";
    boolean banderaArchivoAbierto = false, Menu=true;
    int caretpos;
    File archivo;
    
    String nombreArchivo = "";

    public JFCompiler() {
        super("Proyecto Compiladores I");
        initComponents();
        
        FileFilter filter = new FileNameExtensionFilter("JFCompiler", "jfc");
        this.seleccionArchivo.setFileFilter(filter);
        
    
        ta_code.addCaretListener(new CaretListener(){public void caretUpdate(CaretEvent e){cambio(e);}});
        l.setComponentOrientation ( ComponentOrientation.RIGHT_TO_LEFT );
        l.setRows(2000);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        tb_quick_buttons = new javax.swing.JToolBar();
        Abrir = new javax.swing.JButton();
        Compilar = new javax.swing.JButton();
        tabb = new javax.swing.JTabbedPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        l = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta_code = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        ta_output = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tb_quick_buttons.setRollover(true);

        Abrir.setText("Abrir");
        Abrir.setFocusable(false);
        Abrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Abrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirActionPerformed(evt);
            }
        });
        tb_quick_buttons.add(Abrir);

        Compilar.setText("Compilar");
        Compilar.setFocusable(false);
        Compilar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Compilar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Compilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompilarActionPerformed(evt);
            }
        });
        tb_quick_buttons.add(Compilar);

        tabb.setPreferredSize(new java.awt.Dimension(833, 587));

        jSplitPane1.setDividerLocation(400);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        l.setEditable(false);
        l.setBackground(new java.awt.Color(204, 204, 204));
        l.setColumns(1);
        l.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        l.setForeground(new java.awt.Color(255, 255, 51));
        l.setRows(5);
        l.setTabSize(1);
        l.setBorder(null);
        l.setDisabledTextColor(new java.awt.Color(102, 0, 102));
        l.setEnabled(false);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        ta_code.setColumns(20);
        ta_code.setRows(5);
        ta_code.setAlignmentX(1.0F);
        ta_code.setAutoscrolls(false);
        ta_code.setBorder(null);
        ta_code.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        ta_code.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                ta_codeCaretUpdate(evt);
            }
        });
        ta_code.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                ta_codeCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jScrollPane1.setViewportView(ta_code);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(l, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE))
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel1);

        jSplitPane1.setTopComponent(jScrollPane2);

        ta_output.setEditable(false);
        ta_output.setFont(new java.awt.Font("Book Antiqua", 2, 12)); // NOI18N
        ta_output.setDisabledTextColor(new java.awt.Color(51, 0, 51));
        jScrollPane3.setViewportView(ta_output);

        jSplitPane1.setRightComponent(jScrollPane3);

        tabb.addTab("Nuevo Archivo", jSplitPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(tabb, javax.swing.GroupLayout.PREFERRED_SIZE, 704, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
            .addComponent(tb_quick_buttons, javax.swing.GroupLayout.DEFAULT_SIZE, 784, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tb_quick_buttons, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(tabb, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
     
    private String imprimirErrores()
    {
       String Msjerrores="";
       int totalErrores = 0;
       
        try
        {
            BufferedReader br = new BufferedReader(new FileReader("src/program.err"));
            StringBuilder sb = new StringBuilder();
            String line = br.readLine();
            while (line != null)
            {
               totalErrores++;
               sb.append("   ("+totalErrores+") "+ line + "\n");
               line = br.readLine();
            }
            br.close();
            Msjerrores = sb.toString();
            
        } catch (Exception e)
        {
            e.printStackTrace();
        }
        if(totalErrores>0)
            return "\n  Total Errores encontrados: "+totalErrores+"\n"+Msjerrores;
        else
            return Msjerrores;
    }
    
    private String AbrirArchivo(File archivo) {
        String codigo = "";
        try {
            BufferedReader br = new BufferedReader(new FileReader(archivo));
            StringBuilder sb = new StringBuilder();
            String line = br.readLine();
            l.setText("");            
            while (line != null) {
                sb.append(""+ line + "\n");
                line = br.readLine();
            }
            br.close();
            codigo = sb.toString();
            this.tabb.setTitleAt(this.tabb.getSelectedIndex(), archivo.getName());
            banderaArchivoAbierto = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return codigo;
    }
    
    public void limpiarArchivos()
    {
        try{
            File file=new File("src/program.err");
            DataOutputStream outs = new DataOutputStream(new FileOutputStream(file,false));
            outs.write("".getBytes());
            outs.close();            
        }catch(Exception e){
            System.out.println("Error al borrar archivos!");
        }
    }
    public  String lexico(File argv) {
         
        String errores = "";
        jflex.Main.generate(new File("src/JFCLexer.flex"));
        
        String opciones[] = new String[7];        
        opciones[0] = "-destdir";        
        opciones[1] = "src";        
        opciones[2] = "-parser";        
        opciones[3] = "parser1";        
        opciones[4] = "-symbols";
        opciones[5] = "sym";        
        opciones[6] = "src/JFCParser.cup";
        try {	
            java_cup.Main.main(opciones);
        } catch (Exception e) {
            System.out.print(e);          
        }
        
        System.out.println("Se hizo el Parser");    
   
        try {
            Lexer escaner = null;                   
            parser1 parser1 = null;
            
            escaner = new Lexer(new FileReader(argv));
            parser1 = new parser1(escaner);
            
            System.setErr( new PrintStream( new FileOutputStream(new File( "src/", "program.err" ))));     
            parser1.parse();
                       
            errores = this.imprimirErrores();       
  
            
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        
        return errores;
    }
    


    
    private void ta_codeCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_ta_codeCaretPositionChanged
        //this.colin.setText(this.ta_code.);
               // TODO add your handling code here:
    }//GEN-LAST:event_ta_codeCaretPositionChanged

    private void ta_codeCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_ta_codeCaretUpdate
       

    }//GEN-LAST:event_ta_codeCaretUpdate

    private void AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirActionPerformed
        int seleccion = seleccionArchivo.showOpenDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            try {
                archivo = seleccionArchivo.getSelectedFile();
                String texto_code = AbrirArchivo(archivo);
                ta_code.setText(texto_code);
              
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_AbrirActionPerformed

    private void CompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompilarActionPerformed
         limpiarArchivos();
        
        ta_output.setText("");
        StyledDocument doc = (StyledDocument) ta_output.getDocument();
        if(banderaArchivoAbierto)
            this.guardarArchivo();
        else
            this.guardarArchivoComo();
        javax.swing.text.Style style = doc.addStyle("Compilando", null);
     
       
            try {
                doc.insertString(doc.getLength(), "  Compilando: "+archivo+"\n", style);
            } catch (BadLocationException ex) {
                ex.printStackTrace();
            }    
        MensajesErrores = lexico(archivo);
        
        if (this.MensajesErrores.equals("")) {
           

            try {
                doc.insertString(doc.getLength(), "\n  Se Compiló Exitosamente", style);
            } catch (BadLocationException ex) {
                ex.printStackTrace();
            }
        } else {
            
            
            try {
                doc.insertString(doc.getLength(), MensajesErrores, style);
            } catch (BadLocationException ex) {
                ex.printStackTrace();
            }
           
        }
    }//GEN-LAST:event_CompilarActionPerformed


    private void guardarArchivoComo()
    {
        try
        {
            JFileChooser fc = new JFileChooser("C:/");
            
            FileFilter filter = new FileNameExtensionFilter("JFCompiler", "jfc");
            fc.setFileFilter(filter);
            
            int seleccion=fc.showSaveDialog(null);
            if(seleccion == fc.APPROVE_OPTION)
            {
                String extension = "";
                String Extension = fc.getFileFilter().getDescription();
                System.out.println(Extension);
                if(Extension.contains("JFCompiler")){
                    extension = ".jfc";
                    archivo = new File(fc.getSelectedFile()+extension);
                    FileWriter fw = new FileWriter(archivo);
                    fw.write(this.ta_code.getText());
                    fw.close();
                    JOptionPane.showMessageDialog(null, "Se creo el archivo exitosamente.");
                    this.tabb.setTitleAt(this.tabb.getSelectedIndex(), archivo.getName());
                    this.banderaArchivoAbierto = true;
                }else
                {
                    JOptionPane.showMessageDialog(null, "La extension seleccionada no es valida.");
                }
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al guardar el archivo.\n Error: " + e.getMessage());
        }
    }
    
    private void guardarArchivo() {
        try {
            if (banderaArchivoAbierto) {
                FileWriter fw = new FileWriter(archivo);
                fw.write(this.ta_code.getText());
                fw.close();
                this.tabb.setTitleAt(this.tabb.getSelectedIndex(), archivo.getName());
            } else {
                guardarArchivoComo();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al guardar el archivo.\n Error: " + e.getMessage());
        }
    }    
    private void cambio(CaretEvent e)
    {   
        actual=l.getLineCount();
        
        if(cantidadLineas!=ta_code.getLineCount())
        {    if (cantidadLineas > ta_code.getLineCount()) {
                l.setText("");
                for (int i = 1; i < ta_code.getLineCount(); i++) {
                    l.append(i+"\n");
                }
                
            } else {
                 for (int i = actual; i < ta_code.getLineCount(); i++) {
                    l.append(i+"\n");
                     
                }
            }

            cantidadLineas = ta_code.getLineCount();
        }
    
        
    }
    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new JFCompiler().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Abrir;
    private javax.swing.JButton Compilar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea l;
    private javax.swing.JTextArea ta_code;
    private javax.swing.JTextPane ta_output;
    private javax.swing.JTabbedPane tabb;
    private javax.swing.JToolBar tb_quick_buttons;
    // End of variables declaration//GEN-END:variables

   
}
