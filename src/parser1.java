
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser1 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser1() {super();}

  /** Constructor which sets the default scanner. */
  public parser1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\031\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\032\003\000\002\033\003\000" +
    "\002\033\005\000\002\035\003\000\002\035\005\000\002" +
    "\036\003\000\002\036\005\000\002\036\004\000\002\037" +
    "\003\000\002\037\005\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\005\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\004\000\002" +
    "\026\003\000\002\026\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\034\003\000\002\034\003\000\002\047\005" +
    "\000\002\047\006\000\002\047\007\000\002\065\005\000" +
    "\002\065\003\000\002\041\003\000\002\041\003\000\002" +
    "\042\003\000\002\042\004\000\002\042\003\000\002\042" +
    "\003\000\002\043\006\000\002\043\006\000\002\043\007" +
    "\000\002\043\007\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\044\005\000\002\044\004\000\002\044\005\000\002\045" +
    "\004\000\002\045\003\000\002\052\007\000\002\052\010" +
    "\000\002\055\004\000\002\022\007\000\002\023\003\000" +
    "\002\023\004\000\002\024\010\000\002\024\010\000\002" +
    "\024\006\000\002\024\006\000\002\024\007\000\002\053" +
    "\010\000\002\054\014\000\002\007\003\000\002\056\003" +
    "\000\002\057\003\000\002\010\005\000\002\011\005\000" +
    "\002\012\006\000\002\012\004\000\002\050\003\000\002" +
    "\027\005\000\002\030\005\000\002\064\004\000\002\013" +
    "\002\000\002\013\004\000\002\016\002\000\002\016\005" +
    "\000\002\015\002\000\002\015\004\000\002\017\005\000" +
    "\002\020\005\000\002\020\010\000\002\020\006\000\002" +
    "\014\002\000\002\014\004\000\002\025\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\046\007\000\002\046\007\000" +
    "\002\046\007\000\002\060\007\000\002\060\007\000\002" +
    "\060\005\000\002\061\003\000\002\062\007\000\002\062" +
    "\007\000\002\063\005\000\002\063\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\006\003\005\040\006\001\002\000\004\002" +
    "\334\001\002\000\004\062\330\001\002\000\004\062\007" +
    "\001\002\000\006\003\010\050\011\001\002\000\010\036" +
    "\uffa4\041\uffa4\044\012\001\002\000\010\036\uffa4\041\uffa4" +
    "\044\012\001\002\000\010\036\uffa2\041\uffa2\062\314\001" +
    "\002\000\006\036\uffa0\041\021\001\002\000\004\047\015" +
    "\001\002\000\004\002\uff92\001\002\000\006\036\uffa0\041" +
    "\021\001\002\000\004\036\047\001\002\000\006\036\uffa4" +
    "\044\012\001\002\000\016\024\027\025\023\026\024\027" +
    "\025\030\026\062\022\001\002\000\004\003\042\001\002" +
    "\000\006\050\uff95\062\uff95\001\002\000\006\050\uff96\062" +
    "\uff96\001\002\000\006\050\uff93\062\uff93\001\002\000\006" +
    "\050\uff97\062\uff97\001\002\000\006\050\uff94\062\uff94\001" +
    "\002\000\004\062\031\001\002\000\010\036\uff9d\044\uff9d" +
    "\052\032\001\002\000\014\024\027\025\023\026\024\027" +
    "\025\030\026\001\002\000\004\053\041\001\002\000\004" +
    "\062\036\001\002\000\006\050\uff98\062\uff98\001\002\000" +
    "\006\046\037\053\uffa9\001\002\000\014\024\027\025\023" +
    "\026\024\027\025\030\026\001\002\000\004\053\uffaa\001" +
    "\002\000\006\036\uff9c\044\uff9c\001\002\000\004\050\043" +
    "\001\002\000\006\036\uff9b\044\uff9b\001\002\000\004\050" +
    "\311\001\002\000\004\036\047\001\002\000\004\042\306" +
    "\001\002\000\024\031\056\033\052\034\073\036\047\043" +
    "\054\057\057\060\051\062\060\067\055\001\002\000\006" +
    "\003\304\043\305\001\002\000\004\052\274\001\002\000" +
    "\026\004\121\005\100\020\104\052\105\054\106\055\116" +
    "\056\122\061\107\062\060\063\120\001\002\000\044\003" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2\043\uffc2" +
    "\057\uffc2\060\uffc2\062\uffc2\065\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\071\uffc2\072\uffc2\073\uffc2\001\002\000\050\003\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\036\uffc0\042\uffc0\043" +
    "\uffc0\047\uffc0\057\uffc0\060\uffc0\062\uffc0\065\uffc0\066\uffc0" +
    "\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\001\002\000" +
    "\004\062\241\001\002\000\026\004\121\005\100\020\104" +
    "\052\105\054\106\055\116\056\122\061\107\062\060\063" +
    "\120\001\002\000\004\052\215\001\002\000\102\003\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\031\ufffa\033\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\045\ufffa\046\ufffa\050\ufffa\051\ufffa\052\203\053\ufffa" +
    "\057\ufffa\060\ufffa\062\ufffa\064\ufffa\067\ufffa\001\002\000" +
    "\044\003\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc" +
    "\043\uffcc\057\uffcc\060\uffcc\062\uffcc\065\uffcc\066\uffcc\067" +
    "\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\001\002\000\044" +
    "\003\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\043" +
    "\uffcf\057\uffcf\060\uffcf\062\uffcf\065\uffcf\066\uffcf\067\uffcf" +
    "\070\uffcf\071\uffcf\072\uffcf\073\uffcf\001\002\000\044\003" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\036\uffcb\043\uffcb" +
    "\057\uffcb\060\uffcb\062\uffcb\065\uffcb\066\uffcb\067\uffcb\070" +
    "\uffcb\071\uffcb\072\uffcb\073\uffcb\001\002\000\044\003\uffbd" +
    "\031\056\032\uffbd\033\052\034\073\036\047\043\uffbd\057" +
    "\057\060\051\062\060\065\uffbd\066\uffbd\067\055\070\uffbd" +
    "\071\uffbd\072\uffbd\073\uffbd\001\002\000\044\003\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\036\uffc5\043\uffc5\057\uffc5" +
    "\060\uffc5\062\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071" +
    "\uffc5\072\uffc5\073\uffc5\001\002\000\004\050\201\001\002" +
    "\000\044\003\uffce\031\uffce\032\uffce\033\uffce\034\uffce\036" +
    "\uffce\043\uffce\057\uffce\060\uffce\062\uffce\065\uffce\066\uffce" +
    "\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\001\002\000" +
    "\044\003\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4" +
    "\043\uffc4\057\uffc4\060\uffc4\062\uffc4\065\uffc4\066\uffc4\067" +
    "\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\001\002\000\010" +
    "\010\165\045\164\051\166\001\002\000\044\003\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\036\uffc6\043\uffc6\057\uffc6" +
    "\060\uffc6\062\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071" +
    "\uffc6\072\uffc6\073\uffc6\001\002\000\004\062\076\001\002" +
    "\000\044\003\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\036" +
    "\uffc3\043\uffc3\057\uffc3\060\uffc3\062\uffc3\065\uffc3\066\uffc3" +
    "\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\001\002\000" +
    "\044\003\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0" +
    "\043\uffd0\057\uffd0\060\uffd0\062\uffd0\065\uffd0\066\uffd0\067" +
    "\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\001\002\000\004" +
    "\021\077\001\002\000\026\004\121\005\100\020\104\052" +
    "\105\054\106\055\116\056\122\061\107\062\060\063\120" +
    "\001\002\000\022\020\uffff\052\uffff\054\uffff\055\uffff\056" +
    "\uffff\061\uffff\062\uffff\063\uffff\001\002\000\074\003\uffec" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec" +
    "\022\uffec\023\uffec\031\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\046\uffec\050\uffec\053\uffec\057\uffec\060\uffec\062\uffec" +
    "\064\uffec\067\uffec\001\002\000\004\035\154\001\002\000" +
    "\004\035\uffae\001\002\000\022\020\104\052\105\054\106" +
    "\055\116\056\122\061\107\062\060\063\120\001\002\000" +
    "\026\004\121\005\100\020\104\052\105\054\106\055\116" +
    "\056\122\061\107\062\060\063\120\001\002\000\074\003" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\046\uffeb\050\uffeb\053\uffeb\057\uffeb\060\uffeb\062" +
    "\uffeb\064\uffeb\067\uffeb\001\002\000\074\003\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\031\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\046" +
    "\ufffe\050\ufffe\053\ufffe\057\ufffe\060\ufffe\062\ufffe\064\ufffe" +
    "\067\ufffe\001\002\000\062\003\ufff7\004\140\005\134\010" +
    "\142\011\145\012\136\013\137\014\141\015\133\017\146" +
    "\021\135\031\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\046" +
    "\ufff7\050\ufff7\053\ufff7\057\ufff7\060\ufff7\062\ufff7\064\ufff7" +
    "\067\ufff7\001\002\000\074\003\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\031" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\046\ufff2\050\ufff2" +
    "\053\ufff2\057\ufff2\060\ufff2\062\ufff2\064\ufff2\067\ufff2\001" +
    "\002\000\074\003\ufff5\004\ufff5\005\ufff5\006\124\007\127" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\126\017\ufff5\021\ufff5\022\125\023\130\031\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\046\ufff5\050\ufff5\053\ufff5\057" +
    "\ufff5\060\ufff5\062\ufff5\064\ufff5\067\ufff5\001\002\000\074" +
    "\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\021\uffee\022\uffee\023\uffee\031\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\046\uffee\050\uffee\053\uffee\057\uffee\060\uffee" +
    "\062\uffee\064\uffee\067\uffee\001\002\000\074\003\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\021\uffef\022" +
    "\uffef\023\uffef\031\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\046\uffef\050\uffef\053\uffef\057\uffef\060\uffef\062\uffef\064" +
    "\uffef\067\uffef\001\002\000\022\020\104\052\105\054\106" +
    "\055\116\056\122\061\107\062\060\063\120\001\002\000" +
    "\074\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\021\uffea\022\uffea\023\uffea\031\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\046\uffea\050\uffea\053\uffea\057\uffea\060" +
    "\uffea\062\uffea\064\uffea\067\uffea\001\002\000\074\003\ufff0" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\031\ufff0\033\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\046\ufff0\050\ufff0\053\ufff0\057\ufff0\060\ufff0\062\ufff0" +
    "\064\ufff0\067\ufff0\001\002\000\074\003\uffe8\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\046\uffe8" +
    "\050\uffe8\053\uffe8\057\uffe8\060\uffe8\062\uffe8\064\uffe8\067" +
    "\uffe8\001\002\000\022\020\000\052\000\054\000\055\000" +
    "\056\000\061\000\062\000\063\000\001\002\000\074\003" +
    "\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\046\uffe7\050\uffe7\053\uffe7\057\uffe7\060\uffe7\062" +
    "\uffe7\064\uffe7\067\uffe7\001\002\000\074\003\ufff3\004\ufff3" +
    "\005\ufff3\006\124\007\127\010\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\016\126\017\ufff3\021\ufff3\022\125" +
    "\023\130\031\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\046" +
    "\ufff3\050\ufff3\053\ufff3\057\ufff3\060\ufff3\062\ufff3\064\ufff3" +
    "\067\ufff3\001\002\000\022\020\uffe3\052\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\061\uffe3\062\uffe3\063\uffe3\001\002\000\022" +
    "\020\uffdf\052\uffdf\054\uffdf\055\uffdf\056\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\001\002\000\022\020\uffe0\052\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\061\uffe0\062\uffe0\063\uffe0\001\002\000" +
    "\022\020\uffe2\052\uffe2\054\uffe2\055\uffe2\056\uffe2\061\uffe2" +
    "\062\uffe2\063\uffe2\001\002\000\022\020\uffe1\052\uffe1\054" +
    "\uffe1\055\uffe1\056\uffe1\061\uffe1\062\uffe1\063\uffe1\001\002" +
    "\000\022\020\104\052\105\054\106\055\116\056\122\061" +
    "\107\062\060\063\120\001\002\000\074\003\ufff1\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\031\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\046" +
    "\ufff1\050\ufff1\053\ufff1\057\ufff1\060\ufff1\062\ufff1\064\ufff1" +
    "\067\ufff1\001\002\000\026\004\uffd9\005\uffd9\020\uffd9\052" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\061\uffd9\062\uffd9\063\uffd9" +
    "\001\002\000\022\020\uffe5\052\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\061\uffe5\062\uffe5\063\uffe5\001\002\000\026\004\uffd8" +
    "\005\uffd8\020\uffd8\052\uffd8\054\uffd8\055\uffd8\056\uffd8\061" +
    "\uffd8\062\uffd8\063\uffd8\001\002\000\026\004\uffdb\005\uffdb" +
    "\020\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb\061\uffdb\062" +
    "\uffdb\063\uffdb\001\002\000\026\004\uffdc\005\uffdc\020\uffdc" +
    "\052\uffdc\054\uffdc\055\uffdc\056\uffdc\061\uffdc\062\uffdc\063" +
    "\uffdc\001\002\000\022\020\uffe6\052\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\061\uffe6\062\uffe6\063\uffe6\001\002\000\026\004" +
    "\uffda\005\uffda\020\uffda\052\uffda\054\uffda\055\uffda\056\uffda" +
    "\061\uffda\062\uffda\063\uffda\001\002\000\026\004\uffde\005" +
    "\uffde\020\uffde\052\uffde\054\uffde\055\uffde\056\uffde\061\uffde" +
    "\062\uffde\063\uffde\001\002\000\026\004\121\005\100\020" +
    "\104\052\105\054\106\055\116\056\122\061\107\062\060" +
    "\063\120\001\002\000\022\020\104\052\105\054\106\055" +
    "\116\056\122\061\107\062\060\063\120\001\002\000\026" +
    "\004\uffdd\005\uffdd\020\uffdd\052\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\001\002\000\022\020\uffe4" +
    "\052\uffe4\054\uffe4\055\uffe4\056\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\001\002\000\074\003\ufff4\004\ufff4\005\ufff4\006\124" +
    "\007\127\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\016\126\017\ufff4\021\ufff4\022\125\023\130\031\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\036\ufff4\046\ufff4\050\ufff4\053" +
    "\ufff4\057\ufff4\060\ufff4\062\ufff4\064\ufff4\067\ufff4\001\002" +
    "\000\044\003\ufff6\004\140\005\134\017\146\031\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\046\ufff6\050\ufff6\053\ufff6" +
    "\057\ufff6\060\ufff6\062\ufff6\064\ufff6\067\ufff6\001\002\000" +
    "\004\053\152\001\002\000\074\003\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\021\uffed\022\uffed\023\uffed" +
    "\031\uffed\033\uffed\034\uffed\035\uffed\036\uffed\046\uffed\050" +
    "\uffed\053\uffed\057\uffed\060\uffed\062\uffed\064\uffed\067\uffed" +
    "\001\002\000\074\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\031\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\046\uffe9\050\uffe9\053\uffe9" +
    "\057\uffe9\060\uffe9\062\uffe9\064\uffe9\067\uffe9\001\002\000" +
    "\026\004\uffaf\005\uffaf\020\uffaf\052\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\061\uffaf\062\uffaf\063\uffaf\001\002\000\026\004" +
    "\121\005\100\020\104\052\105\054\106\055\116\056\122" +
    "\061\107\062\060\063\120\001\002\000\004\064\uffad\001" +
    "\002\000\004\064\160\001\002\000\022\031\056\033\052" +
    "\034\073\036\047\057\057\060\051\062\060\067\055\001" +
    "\002\000\004\065\162\001\002\000\004\050\163\001\002" +
    "\000\044\003\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\036" +
    "\uffb0\043\uffb0\057\uffb0\060\uffb0\062\uffb0\065\uffb0\066\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\001\002\000" +
    "\030\003\176\004\121\005\100\020\104\052\105\054\106" +
    "\055\116\056\122\061\107\062\060\063\120\001\002\000" +
    "\004\003\172\001\002\000\004\003\167\001\002\000\026" +
    "\004\121\005\100\020\104\052\105\054\106\055\116\056" +
    "\122\061\107\062\060\063\120\001\002\000\004\050\171" +
    "\001\002\000\044\003\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\036\uffc7\043\uffc7\057\uffc7\060\uffc7\062\uffc7\065\uffc7" +
    "\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\001" +
    "\002\000\026\004\121\005\100\020\104\052\105\054\106" +
    "\055\116\056\122\061\107\062\060\063\120\001\002\000" +
    "\004\050\174\001\002\000\044\003\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\036\uffc8\043\uffc8\057\uffc8\060\uffc8\062" +
    "\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8" +
    "\073\uffc8\001\002\000\004\050\200\001\002\000\004\050" +
    "\177\001\002\000\044\003\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\036\uffc9\043\uffc9\057\uffc9\060\uffc9\062\uffc9\065" +
    "\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9" +
    "\001\002\000\044\003\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\036\uffca\043\uffca\057\uffca\060\uffca\062\uffca\065\uffca" +
    "\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\001" +
    "\002\000\044\003\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\036\uffcd\043\uffcd\057\uffcd\060\uffcd\062\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\001\002" +
    "\000\024\003\uffbe\032\uffbe\043\uffbe\065\uffbe\066\uffbe\070" +
    "\uffbe\071\uffbe\072\uffbe\073\uffbe\001\002\000\030\004\121" +
    "\005\100\020\104\052\105\053\206\054\106\055\116\056" +
    "\122\061\107\062\060\063\120\001\002\000\010\003\uffa8" +
    "\046\uffa8\053\uffa8\001\002\000\010\003\uffd1\046\213\053" +
    "\uffd1\001\002\000\074\003\uffd5\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\031\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\046\uffd5\050\uffd5\053" +
    "\uffd5\057\uffd5\060\uffd5\062\uffd5\064\uffd5\067\uffd5\001\002" +
    "\000\006\003\210\053\211\001\002\000\004\050\212\001" +
    "\002\000\074\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\031\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\046\uffd4\050\uffd4\053\uffd4\057" +
    "\uffd4\060\uffd4\062\uffd4\064\uffd4\067\uffd4\001\002\000\074" +
    "\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\031\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\046\uffd3\050\uffd3\053\uffd3\057\uffd3\060\uffd3" +
    "\062\uffd3\064\uffd3\067\uffd3\001\002\000\026\004\121\005" +
    "\100\020\104\052\105\054\106\055\116\056\122\061\107" +
    "\062\060\063\120\001\002\000\006\003\uffd2\053\uffd2\001" +
    "\002\000\010\003\217\056\122\063\120\001\002\000\006" +
    "\046\225\053\uff88\001\002\000\004\053\223\001\002\000" +
    "\004\053\221\001\002\000\004\050\222\001\002\000\044" +
    "\003\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\036\uff8b\043" +
    "\uff8b\057\uff8b\060\uff8b\062\uff8b\065\uff8b\066\uff8b\067\uff8b" +
    "\070\uff8b\071\uff8b\072\uff8b\073\uff8b\001\002\000\004\050" +
    "\224\001\002\000\044\003\uff8a\031\uff8a\032\uff8a\033\uff8a" +
    "\034\uff8a\036\uff8a\043\uff8a\057\uff8a\060\uff8a\062\uff8a\065" +
    "\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a" +
    "\001\002\000\004\062\226\001\002\000\004\053\ufffa\001" +
    "\002\000\004\053\uff89\001\002\000\022\031\056\033\052" +
    "\034\073\036\047\057\057\060\051\062\060\067\055\001" +
    "\002\000\006\032\232\066\233\001\002\000\022\031\056" +
    "\033\052\034\073\036\047\057\057\060\051\062\060\067" +
    "\055\001\002\000\004\050\237\001\002\000\004\066\235" +
    "\001\002\000\004\050\236\001\002\000\044\003\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb\043\uffbb\057\uffbb" +
    "\060\uffbb\062\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071" +
    "\uffbb\072\uffbb\073\uffbb\001\002\000\044\003\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\036\uffbc\043\uffbc\057\uffbc\060" +
    "\uffbc\062\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc" +
    "\072\uffbc\073\uffbc\001\002\000\004\066\uffba\001\002\000" +
    "\006\070\245\072\243\001\002\000\004\073\265\001\002" +
    "\000\004\051\261\001\002\000\010\070\245\072\243\073" +
    "\uffb8\001\002\000\006\056\247\061\246\001\002\000\004" +
    "\051\254\001\002\000\004\051\250\001\002\000\022\031" +
    "\056\033\052\034\073\036\047\057\057\060\051\062\060" +
    "\067\055\001\002\000\012\070\uffb4\071\252\072\uffb4\073" +
    "\uffb4\001\002\000\004\050\253\001\002\000\010\070\uffb6" +
    "\072\uffb6\073\uffb6\001\002\000\022\031\056\033\052\034" +
    "\073\036\047\057\057\060\051\062\060\067\055\001\002" +
    "\000\012\070\uffb3\071\256\072\uffb3\073\uffb3\001\002\000" +
    "\004\050\257\001\002\000\010\070\uffb5\072\uffb5\073\uffb5" +
    "\001\002\000\004\073\uffb7\001\002\000\022\031\056\033" +
    "\052\034\073\036\047\057\057\060\051\062\060\067\055" +
    "\001\002\000\004\071\263\001\002\000\004\050\264\001" +
    "\002\000\010\070\uffb2\072\uffb2\073\uffb2\001\002\000\004" +
    "\050\266\001\002\000\044\003\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\036\uffb9\043\uffb9\057\uffb9\060\uffb9\062\uffb9" +
    "\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073" +
    "\uffb9\001\002\000\004\064\270\001\002\000\022\031\056" +
    "\033\052\034\073\036\047\057\057\060\051\062\060\067" +
    "\055\001\002\000\004\065\272\001\002\000\004\050\273" +
    "\001\002\000\044\003\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\036\uffb1\043\uffb1\057\uffb1\060\uffb1\062\uffb1\065\uffb1" +
    "\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\001" +
    "\002\000\006\003\275\062\226\001\002\000\046\003\uff8d" +
    "\031\uff8d\032\uff8d\033\uff8d\034\uff8d\036\uff8d\043\uff8d\053" +
    "\302\057\uff8d\060\uff8d\062\uff8d\065\uff8d\066\uff8d\067\uff8d" +
    "\070\uff8d\071\uff8d\072\uff8d\073\uff8d\001\002\000\004\053" +
    "\uff8c\001\002\000\004\053\300\001\002\000\004\050\301" +
    "\001\002\000\044\003\uff8f\031\uff8f\032\uff8f\033\uff8f\034" +
    "\uff8f\036\uff8f\043\uff8f\057\uff8f\060\uff8f\062\uff8f\065\uff8f" +
    "\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\001" +
    "\002\000\004\050\303\001\002\000\044\003\uff8e\031\uff8e" +
    "\032\uff8e\033\uff8e\034\uff8e\036\uff8e\043\uff8e\057\uff8e\060" +
    "\uff8e\062\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e\071\uff8e" +
    "\072\uff8e\073\uff8e\001\002\000\050\003\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\036\uffbf\042\uffbf\043\uffbf\047\uffbf" +
    "\057\uffbf\060\uffbf\062\uffbf\065\uffbf\066\uffbf\067\uffbf\070" +
    "\uffbf\071\uffbf\072\uffbf\073\uffbf\001\002\000\050\003\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\036\uffc1\042\uffc1\043" +
    "\uffc1\047\uffc1\057\uffc1\060\uffc1\062\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\001\002\000" +
    "\004\062\310\001\002\000\004\050\uffa6\001\002\000\004" +
    "\050\uffa5\001\002\000\006\036\uff9e\041\uff9e\001\002\000" +
    "\004\047\uffa7\001\002\000\004\036\uff9f\001\002\000\006" +
    "\046\321\051\322\001\002\000\004\050\317\001\002\000" +
    "\006\036\uffa3\041\uffa3\001\002\000\010\036\uffa2\041\uffa2" +
    "\062\314\001\002\000\006\036\uffa1\041\uffa1\001\002\000" +
    "\004\062\314\001\002\000\016\003\323\024\027\025\023" +
    "\026\024\027\025\030\026\001\002\000\004\050\ufffb\001" +
    "\002\000\004\050\ufffc\001\002\000\004\050\ufffd\001\002" +
    "\000\004\047\327\001\002\000\004\002\uff90\001\002\000" +
    "\004\050\331\001\002\000\010\036\uffa4\041\uffa4\044\012" +
    "\001\002\000\004\047\333\001\002\000\004\002\uff91\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\004\046\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\012\027\325\001\001\000\006\013\012\027\013\001" +
    "\001\000\006\003\314\016\315\001\001\000\010\015\016" +
    "\017\015\020\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\312\017\015\020\017\001\001\000\004" +
    "\044\311\001\001\000\006\013\044\030\043\001\001\000" +
    "\004\021\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\032\021\034\025\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\037\021\034\025\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\045\001\001\000\004\064\306\001" +
    "\001\000\036\022\052\032\070\041\063\042\074\043\066" +
    "\044\071\045\047\047\065\051\061\052\064\053\067\054" +
    "\073\060\060\062\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\114\026\100\031\113\032\116\035" +
    "\266\036\107\037\111\040\110\047\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\114\026\100\031\113\032\116\035\227\036\107\037\111" +
    "\040\110\047\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\022\052\032\070\041\063\042\074\043\066\044" +
    "\071\045\201\047\065\051\061\052\064\053\067\054\073" +
    "\060\060\062\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\114\026\100" +
    "\031\113\032\116\035\102\036\107\037\111\040\110\047" +
    "\112\056\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\154\001\001\000\002\001\001\000\014\026" +
    "\100\031\113\032\116\040\152\047\112\001\001\000\024" +
    "\002\114\026\100\031\113\032\116\035\150\036\107\037" +
    "\111\040\110\047\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\143\006\142\001\001\000\002\001" +
    "\001\000\004\005\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\026\100\031\113\032\116\037\122\040" +
    "\110\047\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\026\100\031\113\032\116\040\131\047\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\114\026\100\031\113\032\116\036\147\037\111\040\110" +
    "\047\112\001\001\000\016\026\100\031\113\032\116\037" +
    "\146\040\110\047\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\130\001\001\000\004\004\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\114\026\100\031\113\032" +
    "\116\035\155\036\107\037\111\040\110\047\112\057\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\022" +
    "\052\032\070\041\063\042\074\043\066\044\071\045\160" +
    "\047\065\051\061\052\064\053\067\054\073\060\060\062" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\114\026\100\031\113\032\116\035" +
    "\174\036\107\037\111\040\110\047\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\114\026\100\031" +
    "\113\032\116\035\167\036\107\037\111\040\110\047\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\114\026\100\031\113\032\116\035\172\036\107\037\111" +
    "\040\110\047\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\114\026\100\031\113\032\116\035\203\036\107" +
    "\037\111\040\110\047\112\050\204\065\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\114\026\100\031\113\032\116\035\203" +
    "\036\107\037\111\040\110\047\112\050\204\065\213\001" +
    "\001\000\002\001\001\000\006\026\215\063\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\022\052\032\070\041\063\042\074" +
    "\043\066\044\071\045\230\047\065\051\061\052\064\053" +
    "\067\054\073\060\060\062\062\001\001\000\004\055\233" +
    "\001\001\000\036\022\052\032\070\041\063\042\074\043" +
    "\066\044\071\045\237\047\065\051\061\052\064\053\067" +
    "\054\073\060\060\062\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\241\024\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\257" +
    "\024\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\022\052\032\070\041\063\042\074" +
    "\043\066\044\071\045\250\047\065\051\061\052\064\053" +
    "\067\054\073\060\060\062\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\022\052\032" +
    "\070\041\063\042\074\043\066\044\071\045\254\047\065" +
    "\051\061\052\064\053\067\054\073\060\060\062\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\022\052\032\070\041\063\042" +
    "\074\043\066\044\071\045\261\047\065\051\061\052\064" +
    "\053\067\054\073\060\060\062\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\022\052\032" +
    "\070\041\063\042\074\043\066\044\071\045\270\047\065" +
    "\051\061\052\064\053\067\054\073\060\060\062\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\275\061\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\314\016\317\001\001\000\002\001" +
    "\001\000\004\003\324\001\001\000\006\021\034\025\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\012\027\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser1$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser1$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser1$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol s) {
       if (!s.value.equals(""))
            report_error("Sintáctico en la", s);
    }

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error ");
        m.append(message);
        java_cup.runtime.Symbol s = null;
        if (info instanceof java_cup.runtime.Symbol) {
            s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" linea " + (s.left + 1));

                if (s.right >= 0) {
                    m.append(", columna " + (s.right + 1));
                }
            }
            if (!s.value.equals(""))
            {
                m.append(". No se esperaba el símbolo: '" + s.value + "'");


            
             }
        }
         System.err.println(m);
    }


    public void report_fatal_error(String message, Object info) {
        String msj_fatal = ", no se esperaba fin de archivo.";
        report_error(msj_fatal, info);

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser1$actions {
  private final parser1 parser;

  /** Constructor */
  CUP$parser1$actions(parser1 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser1$do_action_part00000000(
    int                        CUP$parser1$act_num,
    java_cup.runtime.lr_parser CUP$parser1$parser,
    java.util.Stack            CUP$parser1$stack,
    int                        CUP$parser1$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser1$result;

      /* select the action based on the action number */
      switch (CUP$parser1$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = start_val;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser1$parser.done_parsing();
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // signo ::= MAS 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("signo",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // signo ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("signo",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // integer_sin_signo ::= NUM 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("integer_sin_signo",23, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_variable ::= ID COMA declaracion_variable 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_variable ::= ID DOSPUNTOS tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion_variable ::= ID DOSPUNTOS error 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variable ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("variable",24, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion_if ::= expresion 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion_if",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion_if ::= expresion operador_condicional expresion_if 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion_if",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= expresion_simple 
            {
              Object RESULT =null;
		int e_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int e_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object e_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= expresion_simple operador_relacional expresion_simple 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion_simple ::= termino 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion_simple",28, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion_simple ::= expresion_simple operador_suma termino 
            {
              Object RESULT =null;
		int e_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int e_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object e_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int o_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int o_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object o_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion_simple",28, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion_simple ::= signo termino 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion_simple",28, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // termino ::= factor 
            {
              Object RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("termino",29, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // termino ::= termino operador_multiplicacion factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("termino",29, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // factor ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // factor ::= integer_sin_signo 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // factor ::= llamada_funcion 
            {
              Object RESULT =null;
		int l_fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int l_fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object l_f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // factor ::= PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= cadena 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // factor ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // factor ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // factor ::= NOT factor 
            {
              Object RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cadena ::= T_STRING 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("cadena",20, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cadena ::= T_CHAR 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("cadena",20, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operador_suma ::= MAS 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_suma",2, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operador_suma ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_suma",2, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operador_suma ::= OR 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_suma",2, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operador_multiplicacion ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operador_multiplicacion ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operador_multiplicacion ::= DIV 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operador_multiplicacion ::= AND 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operador_multiplicacion ::= MOD 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operador_relacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operador_relacional ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operador_relacional ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operador_relacional ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operador_relacional ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operador_relacional ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operador_relacional ::= IN 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operador_condicional ::= AND 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_condicional",26, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operador_condicional ::= OR 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_condicional",26, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // llamada_funcion ::= ID PARIZQ PARDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("llamada_funcion",37, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // llamada_funcion ::= ID PARIZQ parametros PARDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("llamada_funcion",37, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // llamada_funcion ::= ID PARIZQ parametros error PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("llamada_funcion",37, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros ::= parametro_actual COMA parametros 
            {
              String RESULT =null;
		int p_aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int p_aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object p_a = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parametros",51, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros ::= parametro_actual 
            {
              String RESULT =null;
		int p_aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int p_aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object p_a = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parametros",51, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia ::= sentencia_simple 
            {
              Object RESULT =null;
		int s_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia",31, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia ::= sentencia_estructurada 
            {
              Object RESULT =null;
		int s_eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s_e = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia",31, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia_simple ::= asignacion_sentencia 
            {
              Object RESULT =null;
		int a_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int a_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object a_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_simple",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia_simple ::= llamada_funcion PUNTOCOMA 
            {
              Object RESULT =null;
		int l_fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int l_fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object l_f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_simple",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia_simple ::= lectura_sentencia 
            {
              Object RESULT =null;
		int l_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int l_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object l_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_simple",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia_simple ::= escritura_sentencia 
            {
              Object RESULT =null;
		int e_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int e_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object e_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_simple",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignacion_sentencia ::= variable ASIGNACION expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("asignacion_sentencia",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignacion_sentencia ::= variable ASIGNACION error PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("asignacion_sentencia",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignacion_sentencia ::= variable IGUAL error expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("asignacion_sentencia",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignacion_sentencia ::= variable DOSPUNTOS error expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("asignacion_sentencia",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia_estructurada ::= sentencia_compuesta 
            {
              Object RESULT =null;
		int s_cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s_c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",39, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia_estructurada ::= if_sentencia 
            {
              Object RESULT =null;
		int i_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int i_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object i_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",39, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia_estructurada ::= while_sentencia 
            {
              Object RESULT =null;
		int w_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int w_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object w_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",39, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_estructurada ::= for_sentencia 
            {
              Object RESULT =null;
		int f_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int f_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object f_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",39, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia_estructurada ::= switch_sentecia 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",39, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia_compuesta ::= BEGIN seccion_sentencia END 
            {
              Object RESULT =null;
		int s_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int s_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object s_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",34, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia_compuesta ::= BEGIN END 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",34, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia_compuesta ::= BEGIN seccion_sentencia error 
            {
              Object RESULT =null;
		int s_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int s_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object s_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",34, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // seccion_sentencia ::= sentencia seccion_sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("seccion_sentencia",35, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // seccion_sentencia ::= sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("seccion_sentencia",35, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_sentencia ::= IF expresion seccion_sentencia ENDIF PUNTOCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("if_sentencia",40, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_sentencia ::= IF expresion seccion_sentencia parte_else ENDIF PUNTOCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int p_eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int p_eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object p_e = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("if_sentencia",40, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parte_else ::= ELSE seccion_sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_else",43, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // switch_sentecia ::= SWITCH ID switch_cases ENDSWITCH PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("switch_sentecia",16, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // switch_cases ::= switch_case 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("switch_cases",17, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // switch_cases ::= switch_case switch_cases 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("switch_cases",17, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // switch_case ::= CASE T_CHAR DOSPUNTOS seccion_sentencia BREAK PUNTOCOMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("switch_case",18, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // switch_case ::= CASE NUM DOSPUNTOS seccion_sentencia BREAK PUNTOCOMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("switch_case",18, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // switch_case ::= CASE T_CHAR DOSPUNTOS seccion_sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("switch_case",18, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // switch_case ::= CASE NUM DOSPUNTOS seccion_sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("switch_case",18, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // switch_case ::= DEFAULT DOSPUNTOS seccion_sentencia BREAK PUNTOCOMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("switch_case",18, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // while_sentencia ::= WHILE expresion LOOP seccion_sentencia ENDLOOP PUNTOCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("while_sentencia",41, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for_sentencia ::= FOR ID IN valor_inicial hasta valor_final LOOP seccion_sentencia ENDLOOP PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-8)).value;
		int v_ileft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-6)).left;
		int v_iright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-6)).right;
		Object v_i = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-6)).value;
		int v_fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int v_fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object v_f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("for_sentencia",42, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-9)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // hasta ::= TO 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("hasta",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor_inicial ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("valor_inicial",44, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor_final ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("valor_final",45, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaracion_procedure ::= encabezamiento_procedure bloque PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_procedure",6, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // encabezamiento_procedure ::= PROCEDURE ID PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("encabezamiento_procedure",7, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // grupo_parametros ::= tipo ID COMA grupo_parametros 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("grupo_parametros",8, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // grupo_parametros ::= tipo ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("grupo_parametros",8, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametro_actual ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parametro_actual",38, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // bloque ::= parte_declaracion_variable parte_declaracion_funciones sentencia_compuesta 
            {
              Object RESULT =null;
		int s_cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s_c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("bloque",21, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // bloque_f ::= parte_declaracion_variable sentencia_compuesta retorno 
            {
              Object RESULT =null;
		int s_cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int s_cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object s_c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("bloque_f",22, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // retorno ::= RETURN ID 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("retorno",50, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parte_declaracion_variable ::= 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_variable",9, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parte_declaracion_variable ::= VAR declaracion_var 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_variable",9, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaracion_var ::= 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_var",12, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declaracion_var ::= declaracion_variable PUNTOCOMA declaracion_var 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_var",12, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parte_declaracion_funciones ::= 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_funciones",11, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parte_declaracion_funciones ::= declaracion_funcion parte_declaracion_funciones 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_funciones",11, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declaracion_funcion ::= encabezamiento_funcion bloque_f PUNTOCOMA 
            {
              Object RESULT =null;
		int e_fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int e_fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object e_f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int b_fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int b_fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object b_f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",13, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // encabezamiento_funcion ::= FUNCTION tipo_primitivo ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("encabezamiento_funcion",14, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // encabezamiento_funcion ::= FUNCTION tipo_primitivo ID PARIZQ grupo_parametros PARDER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("encabezamiento_funcion",14, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // encabezamiento_funcion ::= FUNCTION ID error PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("encabezamiento_funcion",14, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parte_declaracion_procedure ::= 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_procedure",10, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parte_declaracion_procedure ::= declaracion_procedure parte_declaracion_procedure 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_procedure",10, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipo ::= tipo_primitivo 
            {
              Object RESULT =null;
		int t_primleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int t_primright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object t_prim = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipo_primitivo ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",15, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipo_primitivo ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",15, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipo_primitivo ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",15, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipo_primitivo ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",15, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipo_primitivo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",15, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // programa ::= PROGRAM ID PUNTOCOMA bloque PUNTO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("programa",36, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // programa ::= error ID PUNTOCOMA bloque PUNTO 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("programa",36, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // programa ::= PROGRAM ID error bloque PUNTO 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("programa",36, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // lectura_sentencia ::= READ PARIZQ lectura PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		int lectleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int lectright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object lect = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("lectura_sentencia",46, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // lectura_sentencia ::= READ PARIZQ error PARDER PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("lectura_sentencia",46, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lectura_sentencia ::= READ PARIZQ error 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("lectura_sentencia",46, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // lectura ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("lectura",47, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // escritura_sentencia ::= WRITE PARIZQ escritura PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		int escleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int escright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object esc = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("escritura_sentencia",48, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // escritura_sentencia ::= WRITE PARIZQ error PARDER PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("escritura_sentencia",48, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // escritura ::= cadena COMA variable 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("escritura",49, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // escritura ::= cadena 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("escritura",49, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser1$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser1$do_action(
    int                        CUP$parser1$act_num,
    java_cup.runtime.lr_parser CUP$parser1$parser,
    java.util.Stack            CUP$parser1$stack,
    int                        CUP$parser1$top)
    throws java.lang.Exception
    {
              return CUP$parser1$do_action_part00000000(
                               CUP$parser1$act_num,
                               CUP$parser1$parser,
                               CUP$parser1$stack,
                               CUP$parser1$top);
    }
}

}
