
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 24 03:35:33 CST 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 24 03:35:33 CST 2014
  */
public class parser1 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser1() {super();}

  /** Constructor which sets the default scanner. */
  public parser1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\213\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\033\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\034\003\000\002\034\003\000" +
    "\002\035\006\000\002\035\010\000\002\035\005\000\002" +
    "\036\003\000\002\036\005\000\002\037\003\000\002\037" +
    "\005\000\002\037\004\000\002\040\003\000\002\040\005" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\005\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\004\000\002\031\003\000\002\031" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\050\005" +
    "\000\002\050\006\000\002\050\007\000\002\071\005\000" +
    "\002\071\003\000\002\042\003\000\002\042\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\044\006\000\002\044\006\000\002\044\007" +
    "\000\002\044\007\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\045\005\000\002\045\004\000\002\045\005\000\002\046" +
    "\004\000\002\046\003\000\002\054\006\000\002\054\007" +
    "\000\002\060\004\000\002\055\006\000\002\056\007\000" +
    "\002\056\007\000\002\062\004\000\002\062\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\057\012\000\002\007\003" +
    "\000\002\007\003\000\002\063\003\000\002\064\003\000" +
    "\002\010\005\000\002\011\005\000\002\011\010\000\002" +
    "\012\005\000\002\012\003\000\002\013\003\000\002\013" +
    "\004\000\002\014\005\000\002\014\012\000\002\014\014" +
    "\000\002\014\005\000\002\052\004\000\002\052\007\000" +
    "\002\052\010\000\002\052\005\000\002\051\003\000\002" +
    "\032\006\000\002\015\002\000\002\015\004\000\002\020" +
    "\002\000\002\020\005\000\002\017\002\000\002\017\004" +
    "\000\002\021\005\000\002\022\007\000\002\022\012\000" +
    "\002\022\006\000\002\016\002\000\002\016\004\000\002" +
    "\030\003\000\002\030\003\000\002\025\003\000\002\025" +
    "\003\000\002\026\010\000\002\027\012\000\002\023\006" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\006\000\002\047\007\000\002" +
    "\047\007\000\002\047\007\000\002\065\007\000\002\065" +
    "\007\000\002\065\005\000\002\066\003\000\002\067\007" +
    "\000\002\067\007\000\002\070\005\000\002\070\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\006\003\005\045\006\001\002\000\004\002" +
    "\u0112\001\002\000\004\071\u010e\001\002\000\004\071\007" +
    "\001\002\000\006\003\010\055\011\001\002\000\012\043" +
    "\uff99\044\uff99\046\uff99\050\012\001\002\000\012\043\uff99" +
    "\044\uff99\046\uff99\050\012\001\002\000\012\043\uff97\044" +
    "\uff97\046\uff97\071\363\001\002\000\010\043\uff8f\044\016" +
    "\046\uff8f\001\002\000\004\054\015\001\002\000\004\002" +
    "\uff81\001\002\000\004\071\355\001\002\000\012\043\uff99" +
    "\044\uff99\046\uff99\050\012\001\002\000\010\043\uff8f\044" +
    "\016\046\uff8f\001\002\000\006\043\uff95\046\025\001\002" +
    "\000\006\043\uff95\046\025\001\002\000\004\043\106\001" +
    "\002\000\012\043\uff99\044\uff99\046\uff99\050\012\001\002" +
    "\000\004\071\026\001\002\000\010\003\027\056\031\057" +
    "\030\001\002\000\004\055\102\001\002\000\006\050\044" +
    "\071\045\001\002\000\012\025\035\026\032\027\033\030" +
    "\034\001\002\000\006\055\uff84\060\uff84\001\002\000\010" +
    "\055\uff85\060\uff85\061\040\001\002\000\006\055\uff86\060" +
    "\uff86\001\002\000\006\055\uff83\060\uff83\001\002\000\004" +
    "\055\037\001\002\000\012\043\uff92\044\uff92\046\uff92\050" +
    "\uff92\001\002\000\004\070\041\001\002\000\004\062\042" +
    "\001\002\000\006\055\uff82\060\uff82\001\002\000\006\055" +
    "\uffa5\060\uffa5\001\002\000\004\071\045\001\002\000\006" +
    "\053\056\056\057\001\002\000\004\060\052\001\002\000" +
    "\006\055\050\060\uffa6\001\002\000\006\050\044\071\045" +
    "\001\002\000\004\060\uffa7\001\002\000\004\056\053\001" +
    "\002\000\012\025\035\026\032\027\033\030\034\001\002" +
    "\000\004\055\055\001\002\000\012\043\uff91\044\uff91\046" +
    "\uff91\050\uff91\001\002\000\004\071\045\001\002\000\014" +
    "\024\061\025\035\026\032\027\033\030\034\001\002\000" +
    "\006\055\uffa3\060\uffa3\001\002\000\004\061\062\001\002" +
    "\000\004\070\063\001\002\000\004\054\075\001\002\000" +
    "\006\053\065\062\066\001\002\000\004\070\063\001\002" +
    "\000\004\051\067\001\002\000\012\025\035\026\032\027" +
    "\033\030\034\001\002\000\006\055\uffa2\060\uffa2\001\002" +
    "\000\004\062\072\001\002\000\004\051\073\001\002\000" +
    "\012\025\035\026\032\027\033\030\034\001\002\000\006" +
    "\055\uffa1\060\uffa1\001\002\000\004\054\076\001\002\000" +
    "\004\070\077\001\002\000\006\053\uff87\062\uff87\001\002" +
    "\000\006\055\uffa0\060\uffa0\001\002\000\006\055\uffa4\060" +
    "\uffa4\001\002\000\012\043\uff90\044\uff90\046\uff90\050\uff90" +
    "\001\002\000\004\055\104\001\002\000\006\043\uff93\046" +
    "\uff93\001\002\000\006\054\uff9a\055\uff9a\001\002\000\024" +
    "\031\114\034\134\036\111\040\132\043\106\047\113\066" +
    "\115\067\110\071\116\001\002\000\006\003\347\047\350" +
    "\001\002\000\004\057\337\001\002\000\026\004\170\005" +
    "\147\020\152\057\153\063\154\064\165\065\171\070\156" +
    "\071\155\072\167\001\002\000\032\003\uffc3\031\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\040\uffc3\043\uffc3\047\uffc3" +
    "\066\uffc3\067\uffc3\071\uffc3\001\002\000\036\003\uffc0\031" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\040\uffc0\043\uffc0" +
    "\047\uffc0\054\uffc0\055\uffc0\066\uffc0\067\uffc0\071\uffc0\001" +
    "\002\000\026\004\170\005\147\020\152\057\153\063\154" +
    "\064\165\065\171\070\156\071\155\072\167\001\002\000" +
    "\004\057\313\001\002\000\020\003\301\010\ufffa\052\ufffa" +
    "\055\303\056\ufffa\057\302\061\220\001\002\000\032\003" +
    "\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc" +
    "\043\uffcc\047\uffcc\066\uffcc\067\uffcc\071\uffcc\001\002\000" +
    "\032\003\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\040\uffcf\043\uffcf\047\uffcf\066\uffcf\067\uffcf\071\uffcf\001" +
    "\002\000\032\003\uffcb\031\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\040\uffcb\043\uffcb\047\uffcb\066\uffcb\067\uffcb\071" +
    "\uffcb\001\002\000\026\003\uffbd\031\114\034\134\036\111" +
    "\040\132\043\106\047\uffbd\066\115\067\110\071\116\001" +
    "\002\000\032\003\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\040\uffc5\043\uffc5\047\uffc5\066\uffc5\067\uffc5\071" +
    "\uffc5\001\002\000\032\003\uffce\031\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\040\uffce\043\uffce\047\uffce\066\uffce\067" +
    "\uffce\071\uffce\001\002\000\032\003\uffcd\031\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\040\uffcd\043\uffcd\047\uffcd\066" +
    "\uffcd\067\uffcd\071\uffcd\001\002\000\032\003\uffc4\031\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\040\uffc4\043\uffc4\047" +
    "\uffc4\066\uffc4\067\uffc4\071\uffc4\001\002\000\010\010\264" +
    "\052\263\056\265\001\002\000\032\003\uffc6\031\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\040\uffc6\043\uffc6\047\uffc6" +
    "\066\uffc6\067\uffc6\071\uffc6\001\002\000\066\003\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\032\ufff9\037\ufff9\041\ufff9\042\ufff9\052\ufff9" +
    "\053\ufff9\055\ufff9\056\ufff9\060\ufff9\062\ufff9\001\002\000" +
    "\004\071\250\001\002\000\032\003\uffc2\031\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\040\uffc2\043\uffc2\047\uffc2\066" +
    "\uffc2\067\uffc2\071\uffc2\001\002\000\020\031\114\034\134" +
    "\036\111\040\132\066\115\067\110\071\116\001\002\000" +
    "\032\003\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\040\uffd0\043\uffd0\047\uffd0\066\uffd0\067\uffd0\071\uffd0\001" +
    "\002\000\024\003\uffb1\031\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\040\uffb1\066\uffb1\067\uffb1\071\uffb1\001\002\000\024\003" +
    "\uffb3\031\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\066\uffb3" +
    "\067\uffb3\071\uffb3\001\002\000\024\003\uffb5\031\114\034" +
    "\134\035\uffb5\036\111\040\132\066\115\067\110\071\116" +
    "\001\002\000\024\003\uffb2\031\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\040\uffb2\066\uffb2\067\uffb2\071\uffb2\001\002\000\006" +
    "\003\145\035\146\001\002\000\024\003\uffb0\031\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\040\uffb0\066\uffb0\067\uffb0\071\uffb0" +
    "\001\002\000\024\003\uffb4\031\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\040\uffb4\066\uffb4\067\uffb4\071\uffb4\001\002\000\026" +
    "\004\170\005\147\020\152\057\153\063\154\064\165\065" +
    "\171\070\156\071\155\072\167\001\002\000\026\004\170" +
    "\005\147\020\152\057\153\063\154\064\165\065\171\070" +
    "\156\071\155\072\167\001\002\000\022\020\uffff\057\uffff" +
    "\063\uffff\064\uffff\065\uffff\070\uffff\071\uffff\072\uffff\001" +
    "\002\000\062\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\021\uffea\022\uffea\023\uffea\032\uffea\037\uffea" +
    "\041\uffea\042\uffea\053\uffea\055\uffea\060\uffea\062\uffea\001" +
    "\002\000\004\055\244\001\002\000\022\020\152\057\153" +
    "\063\154\064\165\065\171\070\156\071\155\072\167\001" +
    "\002\000\026\004\170\005\147\020\152\057\153\063\154" +
    "\064\165\065\171\070\156\071\155\072\167\001\002\000" +
    "\062\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\032\uffe9\037\uffe9\041\uffe9" +
    "\042\uffe9\053\uffe9\055\uffe9\060\uffe9\062\uffe9\001\002\000" +
    "\066\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\032\ufffa\037\ufffa\041\ufffa" +
    "\042\ufffa\053\ufffa\055\ufffa\057\221\060\ufffa\061\220\062" +
    "\ufffa\001\002\000\062\003\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\021\ufffe\022\ufffe\023\ufffe\032\ufffe" +
    "\037\ufffe\041\ufffe\042\ufffe\053\ufffe\055\ufffe\060\ufffe\062" +
    "\ufffe\001\002\000\050\003\ufff5\004\207\005\203\010\211" +
    "\011\213\012\205\013\206\014\210\015\202\017\215\021" +
    "\204\032\ufff5\037\ufff5\041\ufff5\042\ufff5\053\ufff5\055\ufff5" +
    "\060\ufff5\062\ufff5\001\002\000\062\003\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\032\ufff0\037\ufff0\041\ufff0\042\ufff0\053\ufff0\055\ufff0" +
    "\060\ufff0\062\ufff0\001\002\000\062\003\ufff3\004\ufff3\005" +
    "\ufff3\006\173\007\176\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\175\017\ufff3\021\ufff3\022\174\023" +
    "\177\032\ufff3\037\ufff3\041\ufff3\042\ufff3\053\ufff3\055\ufff3" +
    "\060\ufff3\062\ufff3\001\002\000\062\003\uffec\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec\022\uffec\023" +
    "\uffec\032\uffec\037\uffec\041\uffec\042\uffec\053\uffec\055\uffec" +
    "\060\uffec\062\uffec\001\002\000\062\003\uffed\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\021\uffed\022\uffed\023" +
    "\uffed\032\uffed\037\uffed\041\uffed\042\uffed\053\uffed\055\uffed" +
    "\060\uffed\062\uffed\001\002\000\022\020\152\057\153\063" +
    "\154\064\165\065\171\070\156\071\155\072\167\001\002" +
    "\000\062\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\021\uffe8\022\uffe8\023\uffe8\032\uffe8\037\uffe8\041" +
    "\uffe8\042\uffe8\053\uffe8\055\uffe8\060\uffe8\062\uffe8\001\002" +
    "\000\062\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\021\uffee\022\uffee\023\uffee\032\uffee\037\uffee\041" +
    "\uffee\042\uffee\053\uffee\055\uffee\060\uffee\062\uffee\001\002" +
    "\000\062\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\021\uffe6\022\uffe6\023\uffe6\032\uffe6\037\uffe6\041" +
    "\uffe6\042\uffe6\053\uffe6\055\uffe6\060\uffe6\062\uffe6\001\002" +
    "\000\022\020\000\057\000\063\000\064\000\065\000\070" +
    "\000\071\000\072\000\001\002\000\062\003\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\032\uffe5\037\uffe5\041\uffe5\042\uffe5\053\uffe5\055" +
    "\uffe5\060\uffe5\062\uffe5\001\002\000\062\003\ufff1\004\ufff1" +
    "\005\ufff1\006\173\007\176\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\175\017\ufff1\021\ufff1\022\174" +
    "\023\177\032\ufff1\037\ufff1\041\ufff1\042\ufff1\053\ufff1\055" +
    "\ufff1\060\ufff1\062\ufff1\001\002\000\022\020\uffe1\057\uffe1" +
    "\063\uffe1\064\uffe1\065\uffe1\070\uffe1\071\uffe1\072\uffe1\001" +
    "\002\000\022\020\uffdd\057\uffdd\063\uffdd\064\uffdd\065\uffdd" +
    "\070\uffdd\071\uffdd\072\uffdd\001\002\000\022\020\uffde\057" +
    "\uffde\063\uffde\064\uffde\065\uffde\070\uffde\071\uffde\072\uffde" +
    "\001\002\000\022\020\uffe0\057\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\070\uffe0\071\uffe0\072\uffe0\001\002\000\022\020\uffdf" +
    "\057\uffdf\063\uffdf\064\uffdf\065\uffdf\070\uffdf\071\uffdf\072" +
    "\uffdf\001\002\000\022\020\152\057\153\063\154\064\165" +
    "\065\171\070\156\071\155\072\167\001\002\000\062\003" +
    "\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\021" +
    "\uffef\022\uffef\023\uffef\032\uffef\037\uffef\041\uffef\042\uffef" +
    "\053\uffef\055\uffef\060\uffef\062\uffef\001\002\000\026\004" +
    "\uffd7\005\uffd7\020\uffd7\057\uffd7\063\uffd7\064\uffd7\065\uffd7" +
    "\070\uffd7\071\uffd7\072\uffd7\001\002\000\022\020\uffe3\057" +
    "\uffe3\063\uffe3\064\uffe3\065\uffe3\070\uffe3\071\uffe3\072\uffe3" +
    "\001\002\000\026\004\uffd6\005\uffd6\020\uffd6\057\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\070\uffd6\071\uffd6\072\uffd6\001\002" +
    "\000\026\004\uffd9\005\uffd9\020\uffd9\057\uffd9\063\uffd9\064" +
    "\uffd9\065\uffd9\070\uffd9\071\uffd9\072\uffd9\001\002\000\026" +
    "\004\uffda\005\uffda\020\uffda\057\uffda\063\uffda\064\uffda\065" +
    "\uffda\070\uffda\071\uffda\072\uffda\001\002\000\022\020\uffe4" +
    "\057\uffe4\063\uffe4\064\uffe4\065\uffe4\070\uffe4\071\uffe4\072" +
    "\uffe4\001\002\000\026\004\uffd8\005\uffd8\020\uffd8\057\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\070\uffd8\071\uffd8\072\uffd8\001" +
    "\002\000\026\004\uffdc\005\uffdc\020\uffdc\057\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\070\uffdc\071\uffdc\072\uffdc\001\002\000" +
    "\026\004\170\005\147\020\152\057\153\063\154\064\165" +
    "\065\171\070\156\071\155\072\167\001\002\000\026\004" +
    "\uffdb\005\uffdb\020\uffdb\057\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\070\uffdb\071\uffdb\072\uffdb\001\002\000\022\020\152\057" +
    "\153\063\154\064\165\065\171\070\156\071\155\072\167" +
    "\001\002\000\022\020\uffe2\057\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\070\uffe2\071\uffe2\072\uffe2\001\002\000\062\003\ufff2" +
    "\004\ufff2\005\ufff2\006\173\007\176\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\175\017\ufff2\021\ufff2" +
    "\022\174\023\177\032\ufff2\037\ufff2\041\ufff2\042\ufff2\053" +
    "\ufff2\055\ufff2\060\ufff2\062\ufff2\001\002\000\032\003\ufff4" +
    "\004\207\005\203\017\215\032\ufff4\037\ufff4\041\ufff4\042" +
    "\ufff4\053\ufff4\055\ufff4\060\ufff4\062\ufff4\001\002\000\030" +
    "\003\234\004\170\005\147\020\152\057\153\063\154\064" +
    "\165\065\171\070\156\071\155\072\167\001\002\000\030" +
    "\004\170\005\147\020\152\057\153\060\224\063\154\064" +
    "\165\065\171\070\156\071\155\072\167\001\002\000\010" +
    "\003\uff9b\053\uff9b\060\uff9b\001\002\000\010\003\uffd1\053" +
    "\231\060\uffd1\001\002\000\062\003\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\032\uffd5\037\uffd5\041\uffd5\042\uffd5\053\uffd5\055\uffd5\060" +
    "\uffd5\062\uffd5\001\002\000\006\003\226\060\227\001\002" +
    "\000\004\055\230\001\002\000\062\003\uffd4\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\032\uffd4\037\uffd4\041\uffd4\042\uffd4\053\uffd4\055\uffd4" +
    "\060\uffd4\062\uffd4\001\002\000\062\003\uffd3\004\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\032\uffd3\037\uffd3\041\uffd3\042\uffd3\053\uffd3\055\uffd3" +
    "\060\uffd3\062\uffd3\001\002\000\026\004\170\005\147\020" +
    "\152\057\153\063\154\064\165\065\171\070\156\071\155" +
    "\072\167\001\002\000\006\003\uffd2\060\uffd2\001\002\000" +
    "\006\053\235\062\236\001\002\000\066\003\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\032\ufff6\037\ufff6\041\ufff6\042\ufff6\052\ufff6\053" +
    "\ufff6\055\ufff6\056\ufff6\060\ufff6\062\ufff6\001\002\000\026" +
    "\004\170\005\147\020\152\057\153\063\154\064\165\065" +
    "\171\070\156\071\155\072\167\001\002\000\066\003\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\032\ufff8\037\ufff8\041\ufff8\042\ufff8\052" +
    "\ufff8\053\ufff8\055\ufff8\056\ufff8\060\ufff8\062\ufff8\001\002" +
    "\000\004\062\240\001\002\000\066\003\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\032\ufff7\037\ufff7\041\ufff7\042\ufff7\052\ufff7\053\ufff7" +
    "\055\ufff7\056\ufff7\060\ufff7\062\ufff7\001\002\000\004\060" +
    "\242\001\002\000\062\003\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\032\uffeb" +
    "\037\uffeb\041\uffeb\042\uffeb\053\uffeb\055\uffeb\060\uffeb\062" +
    "\uffeb\001\002\000\062\003\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\032\uffe7" +
    "\037\uffe7\041\uffe7\042\uffe7\053\uffe7\055\uffe7\060\uffe7\062" +
    "\uffe7\001\002\000\032\003\uffb8\031\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\040\uffb8\043\uffb8\047\uffb8\066\uffb8\067" +
    "\uffb8\071\uffb8\001\002\000\004\055\246\001\002\000\032" +
    "\003\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\040" +
    "\uffb7\043\uffb7\047\uffb7\066\uffb7\067\uffb7\071\uffb7\001\002" +
    "\000\006\003\uffb6\035\uffb6\001\002\000\004\052\251\001" +
    "\002\000\026\004\170\005\147\020\152\057\153\063\154" +
    "\064\165\065\171\070\156\071\155\072\167\001\002\000" +
    "\006\041\254\042\256\001\002\000\006\041\uffac\042\uffac" +
    "\001\002\000\026\004\uffae\005\uffae\020\uffae\057\uffae\063" +
    "\uffae\064\uffae\065\uffae\070\uffae\071\uffae\072\uffae\001\002" +
    "\000\026\004\170\005\147\020\152\057\153\063\154\064" +
    "\165\065\171\070\156\071\155\072\167\001\002\000\026" +
    "\004\uffad\005\uffad\020\uffad\057\uffad\063\uffad\064\uffad\065" +
    "\uffad\070\uffad\071\uffad\072\uffad\001\002\000\004\037\uffab" +
    "\001\002\000\004\037\261\001\002\000\022\031\114\034" +
    "\134\036\111\040\132\043\106\066\115\067\110\071\116" +
    "\001\002\000\032\003\uffaf\031\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\040\uffaf\043\uffaf\047\uffaf\066\uffaf\067\uffaf" +
    "\071\uffaf\001\002\000\030\003\275\004\170\005\147\020" +
    "\152\057\153\063\154\064\165\065\171\070\156\071\155" +
    "\072\167\001\002\000\004\003\271\001\002\000\004\003" +
    "\266\001\002\000\026\004\170\005\147\020\152\057\153" +
    "\063\154\064\165\065\171\070\156\071\155\072\167\001" +
    "\002\000\004\055\270\001\002\000\032\003\uffc7\031\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7\043\uffc7\047" +
    "\uffc7\066\uffc7\067\uffc7\071\uffc7\001\002\000\026\004\170" +
    "\005\147\020\152\057\153\063\154\064\165\065\171\070" +
    "\156\071\155\072\167\001\002\000\004\055\273\001\002" +
    "\000\032\003\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\040\uffc8\043\uffc8\047\uffc8\066\uffc8\067\uffc8\071\uffc8" +
    "\001\002\000\004\055\277\001\002\000\004\055\276\001" +
    "\002\000\032\003\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\040\uffc9\043\uffc9\047\uffc9\066\uffc9\067\uffc9\071" +
    "\uffc9\001\002\000\032\003\uffca\031\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\040\uffca\043\uffca\047\uffca\066\uffca\067" +
    "\uffca\071\uffca\001\002\000\006\003\uffbe\047\uffbe\001\002" +
    "\000\004\055\312\001\002\000\026\004\170\005\147\020" +
    "\152\057\153\063\154\064\165\065\171\070\156\071\155" +
    "\072\167\001\002\000\032\003\uff9f\031\uff9f\033\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\040\uff9f\043\uff9f\047\uff9f\066\uff9f" +
    "\067\uff9f\071\uff9f\001\002\000\006\003\306\060\305\001" +
    "\002\000\004\055\311\001\002\000\004\060\307\001\002" +
    "\000\004\055\310\001\002\000\032\003\uff9d\031\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\040\uff9d\043\uff9d\047\uff9d" +
    "\066\uff9d\067\uff9d\071\uff9d\001\002\000\032\003\uff9e\031" +
    "\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\040\uff9e\043\uff9e" +
    "\047\uff9e\066\uff9e\067\uff9e\071\uff9e\001\002\000\032\003" +
    "\uff9c\031\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\040\uff9c" +
    "\043\uff9c\047\uff9c\066\uff9c\067\uff9c\071\uff9c\001\002\000" +
    "\010\003\315\065\171\072\167\001\002\000\006\053\323" +
    "\060\uff77\001\002\000\004\060\321\001\002\000\004\060" +
    "\317\001\002\000\004\055\320\001\002\000\032\003\uff7a" +
    "\031\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\040\uff7a\043" +
    "\uff7a\047\uff7a\066\uff7a\067\uff7a\071\uff7a\001\002\000\004" +
    "\055\322\001\002\000\032\003\uff79\031\uff79\033\uff79\034" +
    "\uff79\035\uff79\036\uff79\040\uff79\043\uff79\047\uff79\066\uff79" +
    "\067\uff79\071\uff79\001\002\000\004\071\324\001\002\000" +
    "\006\060\ufffa\061\220\001\002\000\004\060\uff78\001\002" +
    "\000\004\032\327\001\002\000\022\031\114\034\134\036" +
    "\111\040\132\043\106\066\115\067\110\071\116\001\002" +
    "\000\032\003\uffbc\031\uffbc\033\331\034\uffbc\035\uffbc\036" +
    "\uffbc\040\uffbc\043\uffbc\047\uffbc\066\uffbc\067\uffbc\071\uffbc" +
    "\001\002\000\022\031\114\034\134\036\111\040\132\043" +
    "\106\066\115\067\110\071\116\001\002\000\032\003\uffbb" +
    "\031\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\040\uffbb\043" +
    "\uffbb\047\uffbb\066\uffbb\067\uffbb\071\uffbb\001\002\000\032" +
    "\003\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036\uffba\040" +
    "\uffba\043\uffba\047\uffba\066\uffba\067\uffba\071\uffba\001\002" +
    "\000\004\037\335\001\002\000\022\031\114\034\134\036" +
    "\111\040\132\043\106\066\115\067\110\071\116\001\002" +
    "\000\032\003\uffb9\031\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\040\uffb9\043\uffb9\047\uffb9\066\uffb9\067\uffb9\071\uffb9" +
    "\001\002\000\006\003\340\071\324\001\002\000\034\003" +
    "\uff7c\031\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\040\uff7c" +
    "\043\uff7c\047\uff7c\060\345\066\uff7c\067\uff7c\071\uff7c\001" +
    "\002\000\004\060\uff7b\001\002\000\004\060\343\001\002" +
    "\000\004\055\344\001\002\000\032\003\uff7e\031\uff7e\033" +
    "\uff7e\034\uff7e\035\uff7e\036\uff7e\040\uff7e\043\uff7e\047\uff7e" +
    "\066\uff7e\067\uff7e\071\uff7e\001\002\000\004\055\346\001" +
    "\002\000\032\003\uff7d\031\uff7d\033\uff7d\034\uff7d\035\uff7d" +
    "\036\uff7d\040\uff7d\043\uff7d\047\uff7d\066\uff7d\067\uff7d\071" +
    "\uff7d\001\002\000\036\003\uffbf\031\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\040\uffbf\043\uffbf\047\uffbf\054\uffbf\055" +
    "\uffbf\066\uffbf\067\uffbf\071\uffbf\001\002\000\036\003\uffc1" +
    "\031\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\040\uffc1\043" +
    "\uffc1\047\uffc1\054\uffc1\055\uffc1\066\uffc1\067\uffc1\071\uffc1" +
    "\001\002\000\004\043\uff94\001\002\000\006\043\uff8e\046" +
    "\uff8e\001\002\000\004\055\354\001\002\000\010\043\uffaa" +
    "\044\uffaa\046\uffaa\001\002\000\006\055\357\057\356\001" +
    "\002\000\006\050\044\071\045\001\002\000\012\043\uffa9" +
    "\044\uffa9\046\uffa9\050\uffa9\001\002\000\004\060\361\001" +
    "\002\000\004\055\362\001\002\000\012\043\uffa8\044\uffa8" +
    "\046\uffa8\050\uffa8\001\002\000\006\053\370\056\371\001" +
    "\002\000\004\055\366\001\002\000\010\043\uff98\044\uff98" +
    "\046\uff98\001\002\000\012\043\uff97\044\uff97\046\uff97\071" +
    "\363\001\002\000\010\043\uff96\044\uff96\046\uff96\001\002" +
    "\000\004\071\363\001\002\000\016\003\377\024\374\025" +
    "\035\026\032\027\033\030\034\001\002\000\004\055\uff8a" +
    "\001\002\000\004\055\uff8d\001\002\000\004\061\u0101\001" +
    "\002\000\004\055\uff8b\001\002\000\004\055\uff8c\001\002" +
    "\000\004\055\ufffb\001\002\000\004\055\ufffc\001\002\000" +
    "\004\070\063\001\002\000\006\053\u0103\062\u0104\001\002" +
    "\000\004\070\063\001\002\000\004\051\u0105\001\002\000" +
    "\012\025\035\026\032\027\033\030\034\001\002\000\004" +
    "\055\uff89\001\002\000\004\062\u0108\001\002\000\004\051" +
    "\u0109\001\002\000\012\025\035\026\032\027\033\030\034" +
    "\001\002\000\004\055\uff88\001\002\000\004\055\ufffd\001" +
    "\002\000\004\054\u010d\001\002\000\004\002\uff7f\001\002" +
    "\000\004\055\u010f\001\002\000\012\043\uff99\044\uff99\046" +
    "\uff99\050\012\001\002\000\004\054\u0111\001\002\000\004" +
    "\002\uff80\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\004\047\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\012\032\u010b\001\001\000\006\015\012\032\013\001" +
    "\001\000\006\003\363\020\364\001\001\000\010\010\017" +
    "\011\016\016\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\012\032\352\001\001" +
    "\000\010\010\017\011\016\016\351\001\001\000\010\017" +
    "\022\021\021\022\023\001\001\000\010\017\350\021\021" +
    "\022\023\001\001\000\004\045\104\001\001\000\006\015" +
    "\012\032\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\045\013\046\014\042\001" +
    "\001\000\004\024\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\050\013\046\014\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\077\001\001\000" +
    "\004\024\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\070\001\001\000\002\001\001\000\004" +
    "\024\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\034" +
    "\126\035\130\042\121\043\134\044\123\045\127\046\106" +
    "\052\124\053\117\054\122\055\125\056\111\057\132\065" +
    "\116\067\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\163\031\147\033\162\034\165\035\130\036" +
    "\333\037\156\040\160\041\157\050\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\163\031\147\033" +
    "\162\034\165\035\130\036\325\037\156\040\160\041\157" +
    "\050\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\034\126\035\130\042\121\043\134\044\123\045\127\046" +
    "\277\052\124\053\117\054\122\055\125\056\111\057\132" +
    "\065\116\067\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\034\126\035\130\043\143\044\123" +
    "\052\124\054\136\055\140\056\135\057\142\061\137\062" +
    "\141\065\116\067\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\034\126\035\130\043" +
    "\143\044\123\052\124\054\136\055\140\056\135\057\142" +
    "\061\137\062\246\065\116\067\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\163\031\147\033\162\034\165\035\130\036" +
    "\244\037\156\040\160\041\157\050\161\001\001\000\026" +
    "\002\163\031\147\033\162\034\165\035\130\036\150\037" +
    "\156\040\160\041\157\050\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\031\147\033" +
    "\162\034\165\035\130\041\242\050\161\001\001\000\026" +
    "\002\163\031\147\033\162\034\165\035\130\036\240\037" +
    "\156\040\160\041\157\050\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\213\006" +
    "\211\001\001\000\002\001\001\000\004\005\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\031\147\033" +
    "\162\034\165\035\130\040\171\041\157\050\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\031\147\033\162" +
    "\034\165\035\130\041\200\050\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\163\031\147" +
    "\033\162\034\165\035\130\037\216\040\160\041\157\050" +
    "\161\001\001\000\002\001\001\000\020\031\147\033\162" +
    "\034\165\035\130\040\215\041\157\050\161\001\001\000" +
    "\002\001\001\000\004\005\177\001\001\000\004\004\213" +
    "\001\001\000\026\002\163\031\147\033\162\034\165\035" +
    "\130\036\232\037\156\040\160\041\157\050\161\001\001" +
    "\000\032\002\163\031\147\033\162\034\165\035\130\036" +
    "\221\037\156\040\160\041\157\050\161\051\222\071\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\163\031\147\033\162\034" +
    "\165\035\130\036\221\037\156\040\160\041\157\050\161" +
    "\051\222\071\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\163\031\147\033\162" +
    "\034\165\035\130\036\236\037\156\040\160\041\157\050" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\163\031" +
    "\147\033\162\034\165\035\130\036\252\037\156\040\160" +
    "\041\157\050\161\063\251\001\001\000\004\007\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\163" +
    "\031\147\033\162\034\165\035\130\036\256\037\156\040" +
    "\160\041\157\050\161\064\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\034\126\035" +
    "\130\042\261\043\134\044\123\045\127\052\124\053\117" +
    "\054\122\055\125\056\111\057\132\065\116\067\120\001" +
    "\001\000\002\001\001\000\026\002\163\031\147\033\162" +
    "\034\165\035\130\036\273\037\156\040\160\041\157\050" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\002\163\031\147\033\162\034\165\035\130\036\266\037" +
    "\156\040\160\041\157\050\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\163\031\147\033\162\034" +
    "\165\035\130\036\271\037\156\040\160\041\157\050\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\002\163\031" +
    "\147\033\162\034\165\035\130\036\221\037\156\040\160" +
    "\041\157\050\161\051\222\071\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\313\070\315\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\324\035\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\034\126\035\130" +
    "\042\327\043\134\044\123\045\127\052\124\053\117\054" +
    "\122\055\125\056\111\057\132\065\116\067\120\001\001" +
    "\000\004\060\331\001\001\000\036\034\126\035\130\042" +
    "\332\043\134\044\123\045\127\052\124\053\117\054\122" +
    "\055\125\056\111\057\132\065\116\067\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\034\126\035\130\042\335\043\134\044\123\045\127\052" +
    "\124\053\117\054\122\055\125\056\111\057\132\065\116" +
    "\067\120\001\001\000\002\001\001\000\010\034\340\035" +
    "\130\066\341\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\357" +
    "\013\046\014\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\363\020" +
    "\366\001\001\000\002\001\001\000\004\003\u010a\001\001" +
    "\000\014\024\372\025\375\026\374\027\371\030\377\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0101\001\001\000\002\001\001" +
    "\000\004\023\u0106\001\001\000\002\001\001\000\004\024" +
    "\u0105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\012\032\u010f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser1$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser1$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser1$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol s) {
       if (!s.value.equals(""))
            report_error("Sintáctico en la", s);
    }

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error ");
        m.append(message);
        java_cup.runtime.Symbol s = null;
        if (info instanceof java_cup.runtime.Symbol) {
            s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" linea " + (s.left + 1));

                if (s.right >= 0) {
                    m.append(", columna " + (s.right + 1));
                }
            }
            if (!s.value.equals(""))
            {
                m.append(". No se esperaba el símbolo: '" + s.value + "'");


                int vecino = Integer.parseInt(this.stack.lastElement().toString().substring(1));
                if (sym.terminal_name(vecino).equals("EOF"))
                { m.append(". Se esperaba la palabra reservada PROGRAM.");}
                else
                {
                  /*if(esPalabraReservada)
                      m.append(" cerca de la palabra reservada "+sym.terminal_name(vecino)+".");
                 else
                    m.append(" cerca del token "+sym.terminal_name(vecino)+".");*/
                }
             }
        }
         System.err.println(m);
    }


    public void report_fatal_error(String message, Object info) {
        String msj_fatal = ", no se esperaba fin de archivo.";
        report_error(msj_fatal, info);

    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser1$actions {


    ArrayList <String> ambitoActual = new ArrayList();
    ArrayList <Simbolo> Auxiliar = new ArrayList();
    ArrayList<String>  list_Proced_Func = new ArrayList<String>();
    Tipo tipoActual;
    ArrayList <String>padre=new ArrayList();
    TablaSimbolos tablaSimbolos=new TablaSimbolos();
    ArrayList<Integer> rango= new ArrayList<Integer>(4);
    int direccion=0;
    String program="", variableActual = "";
    boolean bandera = false;

   public String CrearString(String padre, int linea, int columna, boolean func)
    {   String params="";
        for(int i=0; i<Auxiliar.size(); i++)
        {  Auxiliar.get(i).setGlobal(false);
            Auxiliar.get(i).setPadre(padre);
            Auxiliar.get(i).setAmbito(CrearAmbito()+"/"+padre);
            System.out.println(this.padre.toString());
            if(!func && tablaSimbolos.contieneSimbolo(Auxiliar.get(i).getNombre(), this.padre.toString()+","+padre))
            {   System.err.println("Error en la línea "+(linea+1)+" columna "+(columna+1)+". '"+Auxiliar.get(i).getNombre()+"' ha sido definido(a) previamente.");}
            else{
            if(func && tablaSimbolos.contieneSimbolo(Auxiliar.get(i).getNombre(), padre))
            {    System.err.println("Error en la línea "+(linea+1)+" columna "+(columna+1)+". '"+Auxiliar.get(i).getNombre()+"' ha sido definido(a) previamente.");}
            else
            {  if(Auxiliar.get(i).getNombre().equalsIgnoreCase(padre) && func )
               {    System.err.println("Error en la línea "+(linea+1)+" columna "+(columna+1)+". '"+Auxiliar.get(i).getNombre()+"' ha sido definido(a) previamente como nombre de la función.");}
               else{

               Auxiliar.get(i).setDireccion(direccion);
               tablaSimbolos.insertarSimbolo(Auxiliar.get(i));
               if (list_Proced_Func.get(i).contains("string"))
               {
                    params+="string,";
               }
               else
               {    params+=list_Proced_Func.get(i)+",";}
               if (Auxiliar.get(i).getTipo().equalsIgnoreCase("integer"))
                {    direccion=direccion+4; }
                else
                {   if (Auxiliar.get(i).getTipo().equalsIgnoreCase("char")||(Auxiliar.get(i).getTipo().equalsIgnoreCase("boolean")))
                    { direccion=direccion+1; }
                    else
                    {if(Auxiliar.get(i).getTipo().contains("array1"))
                     {   int tamañoArreglo=Auxiliar.get(i).getArreglos().getindiceFinal()-Auxiliar.get(i).getArreglos().getindiceInicial()+1;

                          if (Auxiliar.get(i).getArreglos().getStringtipo().contains("integer"))
                          {    direccion=direccion+tamañoArreglo*4; }
                          else
                          {   if (Auxiliar.get(i).getArreglos().getStringtipo().contains("char")||Auxiliar.get(i).getArreglos().getStringtipo().contains("boolean"))
                               { direccion=direccion+tamañoArreglo*1; }
                          }
                     }
                     else
                     {  if(Auxiliar.get(i).getTipo().contains("array2"))
                        {
                             int tamañoArreglo=Auxiliar.get(i).getArreglos().getindiceFinal()-Auxiliar.get(i).getArreglos().getindiceInicial()+1;
                             int tamañoArregloBid=Auxiliar.get(i).getArreglos().getArregloBidimensional().getindiceFinal()-Auxiliar.get(i).getArreglos().getArregloBidimensional().getindiceInicial()+1;
                          if (Auxiliar.get(i).getArreglos().getStringtipo().contains("integer"))
                          {    direccion=direccion+tamañoArreglo*tamañoArregloBid*4; }
                          else
                          {   if (Auxiliar.get(i).getArreglos().getStringtipo().contains("char")||Auxiliar.get(i).getArreglos().getStringtipo().contains("boolean"))
                               { direccion=direccion+tamañoArreglo*tamañoArregloBid*1; }
                          }
                        }
                        else
                        {
                            if(Auxiliar.get(i).getTipo().contains("string"))
                            {
                             int Tamaño=Integer.parseInt(Auxiliar.get(i).getTipo().substring(7));
                             direccion=direccion+Tamaño;

                            }
                         }
                      }
                    }
                  }
                }
              
              }
            }
          }
        return params;
    }
     public String CrearAmbito()
    {   String temp="main";
        if (padre.size()>0)
        {
            for (int i=0; i<padre.size(); i++)
            {
              temp+="/"+padre.get(i);
            }
        }

         return temp;
    }

    public void report_error_tipo(String message, int linea, int columna){
        StringBuffer m = new StringBuffer("Error de Tipado en la linea "+(linea+1)+", columna "+columna+". ");
        System.err.println(m.append(message));
    }

    public void report_warning(String message, int linea, int columna){
        StringBuffer m = new StringBuffer("Advertencia! en la linea "+(linea+1)+", columna "+columna+". ");
        System.err.println(m.append(message));
    }
    
    public void report_error_general(String message, int linea, int columna){
        StringBuffer m = new StringBuffer("Error en la linea "+(linea+1)+", columna "+columna+". ");
        System.err.println(m.append(message));
    }

  private final parser1 parser;

  /** Constructor */
  CUP$parser1$actions(parser1 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser1$do_action(
    int                        CUP$parser1$act_num,
    java_cup.runtime.lr_parser CUP$parser1$parser,
    java.util.Stack            CUP$parser1$stack,
    int                        CUP$parser1$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser1$result;

      /* select the action based on the action number */
      switch (CUP$parser1$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // escritura ::= cadena 
            {
              Elemento RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento cad = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("escritura",54, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // escritura ::= cadena COMA variable 
            {
              Elemento RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Elemento cad = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento var = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("escritura",54, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // escritura_sentencia ::= WRITE PARIZQ error PARDER PUNTOCOMA 
            {
              Elemento RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("escritura_sentencia",53, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // escritura_sentencia ::= WRITE PARIZQ escritura PARDER PUNTOCOMA 
            {
              Elemento RESULT =null;
		int escleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int escright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Elemento esc = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("escritura_sentencia",53, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // lectura ::= variable 
            {
              Elemento RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento var = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("lectura",52, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // lectura_sentencia ::= READ PARIZQ error 
            {
              Elemento RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("lectura_sentencia",51, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // lectura_sentencia ::= READ PARIZQ error PARDER PUNTOCOMA 
            {
              Elemento RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("lectura_sentencia",51, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // lectura_sentencia ::= READ PARIZQ lectura PARDER PUNTOCOMA 
            {
              Elemento RESULT =null;
		int lectleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int lectright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Elemento lect = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("lectura_sentencia",51, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // programa ::= PROGRAM ID error bloque PUNTO 
            {
              Elemento RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("programa",37, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // programa ::= error ID PUNTOCOMA bloque PUNTO 
            {
              Elemento RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("programa",37, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // programa ::= PROGRAM ID PUNTOCOMA bloque PUNTO 
            {
              Elemento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("programa",37, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipo_primitivo ::= STRING CORIZQ NUM CORDER 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",18, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipo_primitivo ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",18, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipo_primitivo ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",18, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tipo_primitivo ::= STRING 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",18, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tipo_primitivo ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",18, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // rango ::= NUM PUNTO PUNTO NUM 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("rango",17, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // arreglo_bidimensional ::= ARRAY CORIZQ rango COMA rango CORDER OF tipo_primitivo 
            {
              Arreglos RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-5)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("arreglo_bidimensional",21, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // arreglo_unidimensional ::= ARRAY CORIZQ rango CORDER OF tipo_primitivo 
            {
              Arreglos RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("arreglo_unidimensional",20, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tipo_arreglo ::= arreglo_bidimensional 
            {
              Arreglos RESULT =null;
		int a_bileft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int a_biright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Arreglos a_bi = (Arreglos)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_arreglo",19, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tipo_arreglo ::= arreglo_unidimensional 
            {
              Arreglos RESULT =null;
		int a_unileft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int a_uniright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Arreglos a_uni = (Arreglos)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_arreglo",19, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipo ::= tipo_arreglo 
            {
              Tipo RESULT =null;
		int t_arrleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int t_arrright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Arreglos t_arr = (Arreglos)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo",22, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipo ::= tipo_primitivo 
            {
              Tipo RESULT =null;
		int t_primleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int t_primright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object t_prim = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo",22, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parte_declaracion_procedure ::= declaracion_procedure parte_declaracion_procedure 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_procedure",12, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parte_declaracion_procedure ::= 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_procedure",12, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // encabezamiento_funcion ::= FUNCTION ID error PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("encabezamiento_funcion",16, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // encabezamiento_funcion ::= FUNCTION ID PARIZQ seccion_parametros_formales PARDER DOSPUNTOS tipo_primitivo PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("encabezamiento_funcion",16, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // encabezamiento_funcion ::= FUNCTION ID DOSPUNTOS tipo_primitivo PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("encabezamiento_funcion",16, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declaracion_funcion ::= encabezamiento_funcion bloque PUNTOCOMA 
            {
              Object RESULT =null;
		int e_fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int e_fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object e_f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",15, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parte_declaracion_funciones ::= declaracion_funcion parte_declaracion_funciones 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_funciones",13, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parte_declaracion_funciones ::= 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_funciones",13, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declaracion_var ::= declaracion_variable PUNTOCOMA declaracion_var 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_var",14, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaracion_var ::= 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_var",14, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parte_declaracion_variable ::= VAR declaracion_var 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_variable",11, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parte_declaracion_variable ::= 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_variable",11, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // bloque ::= parte_declaracion_variable parte_declaracion_procedure parte_declaracion_funciones sentencia_compuesta 
            {
              Elemento RESULT =null;
		int s_cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento s_c = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("bloque",24, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parametro_actual ::= expresion 
            {
              Elemento RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento exp = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parametro_actual",39, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // llamada_procedimiento ::= ID error PUNTOCOMA 
            {
              Elemento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("llamada_procedimiento",40, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // llamada_procedimiento ::= ID PARIZQ parametros error PARDER PUNTOCOMA 
            {
              Elemento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-5)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("llamada_procedimiento",40, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // llamada_procedimiento ::= ID PARIZQ parametros PARDER PUNTOCOMA 
            {
              Elemento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("llamada_procedimiento",40, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // llamada_procedimiento ::= ID PUNTOCOMA 
            {
              Elemento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("llamada_procedimiento",40, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // grupo_parametros ::= ID COMA grupo_parametros 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("grupo_parametros",10, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // grupo_parametros ::= ID DOSPUNTOS ARRAY CORIZQ rango COMA rango CORDER OF tipo_primitivo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-9)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-5)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("grupo_parametros",10, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-9)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // grupo_parametros ::= ID DOSPUNTOS ARRAY CORIZQ rango CORDER OF tipo_primitivo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("grupo_parametros",10, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // grupo_parametros ::= ID DOSPUNTOS tipo_primitivo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("grupo_parametros",10, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametros_formales ::= VAR grupo_parametros 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parametros_formales",9, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametros_formales ::= grupo_parametros 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parametros_formales",9, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // seccion_parametros_formales ::= parametros_formales 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("seccion_parametros_formales",8, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // seccion_parametros_formales ::= parametros_formales PUNTOCOMA seccion_parametros_formales 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("seccion_parametros_formales",8, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // encabezamiento_procedure ::= PROCEDURE ID PARIZQ seccion_parametros_formales PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("encabezamiento_procedure",7, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // encabezamiento_procedure ::= PROCEDURE ID PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("encabezamiento_procedure",7, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declaracion_procedure ::= encabezamiento_procedure bloque PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_procedure",6, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor_final ::= expresion 
            {
              Elemento RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento exp = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("valor_final",50, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor_inicial ::= expresion 
            {
              Elemento RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento exp = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("valor_inicial",49, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // hasta ::= DOWNTO 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("hasta",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // hasta ::= TO 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("hasta",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for_sentencia ::= FOR ID ASIGNACION valor_inicial hasta valor_final DO sentencia 
            {
              Elemento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-6)).value;
		int v_ileft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int v_iright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Elemento v_i = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int v_fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int v_fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Elemento v_f = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("for_sentencia",45, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia_repeat ::= for_sentencia 
            {
              Elemento RESULT =null;
		int f_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int f_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento f_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_repeat",47, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia_repeat ::= repeat_sentencia 
            {
              Elemento RESULT =null;
		int r_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int r_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento r_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_repeat",47, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia_repeat ::= while_sentencia 
            {
              Elemento RESULT =null;
		int w_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int w_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento w_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_repeat",47, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia_repeat ::= if_sentencia 
            {
              Elemento RESULT =null;
		int i_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int i_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento i_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_repeat",47, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia_repeat ::= sentencia_simple 
            {
              Elemento RESULT =null;
		int s_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento s_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_repeat",47, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // seccion_sentencia_repeat ::= sentencia_repeat 
            {
              Elemento RESULT =null;
		int s_rleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_rright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento s_r = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("seccion_sentencia_repeat",48, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // seccion_sentencia_repeat ::= sentencia_repeat seccion_sentencia_repeat 
            {
              Elemento RESULT =null;
		int s_rleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int s_rright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento s_r = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int s_s_rleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_s_rright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento s_s_r = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("seccion_sentencia_repeat",48, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // repeat_sentencia ::= REPEAT seccion_sentencia_repeat error expresion PUNTOCOMA 
            {
              Elemento RESULT =null;
		int s_s_rleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int s_s_rright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Elemento s_s_r = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento exp = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("repeat_sentencia",44, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // repeat_sentencia ::= REPEAT seccion_sentencia_repeat UNTIL expresion PUNTOCOMA 
            {
              Elemento RESULT =null;
		int s_s_rleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int s_s_rright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Elemento s_s_r = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento exp = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("repeat_sentencia",44, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // while_sentencia ::= WHILE expresion DO sentencia 
            {
              Elemento RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Elemento exp = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("while_sentencia",43, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parte_else ::= ELSE sentencia 
            {
              Elemento RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_else",46, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_sentencia ::= IF expresion THEN sentencia parte_else 
            {
              Elemento RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Elemento exp = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int p_eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int p_eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento p_e = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("if_sentencia",42, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_sentencia ::= IF expresion THEN sentencia 
            {
              Elemento RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Elemento exp = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("if_sentencia",42, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // seccion_sentencia ::= sentencia 
            {
              Elemento RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("seccion_sentencia",36, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // seccion_sentencia ::= sentencia seccion_sentencia 
            {
              Elemento RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("seccion_sentencia",36, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia_compuesta ::= BEGIN seccion_sentencia error 
            {
              Elemento RESULT =null;
		int s_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int s_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento s_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",35, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia_compuesta ::= BEGIN END 
            {
              Elemento RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",35, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia_compuesta ::= BEGIN seccion_sentencia END 
            {
              Elemento RESULT =null;
		int s_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int s_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento s_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",35, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia_estructurada ::= for_sentencia 
            {
              Elemento RESULT =null;
		int f_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int f_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento f_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",41, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_estructurada ::= repeat_sentencia 
            {
              Elemento RESULT =null;
		int r_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int r_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento r_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",41, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia_estructurada ::= while_sentencia 
            {
              Elemento RESULT =null;
		int w_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int w_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento w_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",41, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia_estructurada ::= if_sentencia 
            {
              Elemento RESULT =null;
		int i_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int i_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento i_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",41, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia_estructurada ::= sentencia_compuesta 
            {
              Elemento RESULT =null;
		int s_cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento s_c = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",41, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignacion_sentencia ::= variable DOSPUNTOS error expresion PUNTOCOMA 
            {
              Elemento RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Elemento var = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento exp = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("asignacion_sentencia",34, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignacion_sentencia ::= variable IGUAL error expresion PUNTOCOMA 
            {
              Elemento RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Elemento var = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento exp = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("asignacion_sentencia",34, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignacion_sentencia ::= variable ASIGNACION error PUNTOCOMA 
            {
              Elemento RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Elemento var = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("asignacion_sentencia",34, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignacion_sentencia ::= variable ASIGNACION expresion PUNTOCOMA 
            {
              Elemento RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Elemento var = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento exp = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("asignacion_sentencia",34, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia_simple ::= escritura_sentencia 
            {
              Elemento RESULT =null;
		int e_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int e_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento e_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_simple",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia_simple ::= lectura_sentencia 
            {
              Elemento RESULT =null;
		int l_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int l_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento l_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_simple",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia_simple ::= llamada_procedimiento 
            {
              Elemento RESULT =null;
		int l_pleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int l_pright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento l_p = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_simple",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia_simple ::= asignacion_sentencia 
            {
              Elemento RESULT =null;
		int a_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int a_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento a_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_simple",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia ::= sentencia_estructurada 
            {
              Elemento RESULT =null;
		int s_eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento s_e = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia ::= sentencia_simple 
            {
              Elemento RESULT =null;
		int s_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento s_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros ::= parametro_actual 
            {
              String RESULT =null;
		int p_aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int p_aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento p_a = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parametros",55, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros ::= parametro_actual COMA parametros 
            {
              String RESULT =null;
		int p_aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int p_aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Elemento p_a = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parametros",55, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // llamada_funcion ::= ID PARIZQ parametros error PUNTOCOMA 
            {
              Elemento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("llamada_funcion",38, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // llamada_funcion ::= ID PARIZQ parametros PARDER 
            {
              Elemento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("llamada_funcion",38, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // llamada_funcion ::= ID PARIZQ PARDER 
            {
              Elemento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("llamada_funcion",38, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operador_relacional ::= IN 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operador_relacional ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operador_relacional ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operador_relacional ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operador_relacional ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operador_relacional ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operador_relacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operador_multiplicacion ::= MOD 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operador_multiplicacion ::= AND 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operador_multiplicacion ::= DIV 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operador_multiplicacion ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operador_multiplicacion ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operador_suma ::= OR 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_suma",2, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operador_suma ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_suma",2, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operador_suma ::= MAS 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_suma",2, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cadena ::= T_CHAR 
            {
              Elemento RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("cadena",23, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cadena ::= T_STRING 
            {
              Elemento RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("cadena",23, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // factor ::= NOT factor 
            {
              Elemento RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento fact = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // factor ::= FALSE 
            {
              Elemento RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // factor ::= TRUE 
            {
              Elemento RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // factor ::= cadena 
            {
              Elemento RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento cad = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // factor ::= PARIZQ expresion PARDER 
            {
              Elemento RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento exp = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= llamada_funcion 
            {
              Elemento RESULT =null;
		int l_fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int l_fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento l_f = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // factor ::= integer_sin_signo 
            {
              Elemento RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // factor ::= variable 
            {
              Elemento RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento var = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // termino ::= termino operador_multiplicacion factor 
            {
              Elemento RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Elemento term = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento fact = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("termino",30, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // termino ::= factor 
            {
              Elemento RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento fact = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("termino",30, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion_simple ::= signo termino 
            {
              Elemento RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento term = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion_simple",29, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion_simple ::= expresion_simple operador_suma termino 
            {
              Elemento RESULT =null;
		int e_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int e_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Elemento e_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int o_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int o_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object o_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento term = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion_simple",29, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion_simple ::= termino 
            {
              Elemento RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento term = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion_simple",29, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= expresion_simple operador_relacional expresion_simple 
            {
              Elemento RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= expresion_simple 
            {
              Elemento RESULT =null;
		int e_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int e_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento e_s = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable_compuesta ::= ID CORIZQ error 
            {
              Elemento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("variable_compuesta",27, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable_compuesta ::= ID CORIZQ expresion COMA expresion CORDER 
            {
              Elemento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Elemento exp1 = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento exp2 = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("variable_compuesta",27, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable_compuesta ::= ID CORIZQ expresion CORDER 
            {
              Elemento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento exp = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("variable_compuesta",27, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable ::= variable_compuesta 
            {
              Elemento RESULT =null;
		int v_cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int v_cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento v_c = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("variable",26, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variable ::= ID 
            {
              Elemento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("variable",26, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion_variable ::= ID DOSPUNTOS error 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_variable ::= ID DOSPUNTOS tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_variable ::= ID COMA declaracion_variable 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // integer_sin_signo ::= NUM 
            {
              Elemento RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("integer_sin_signo",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // signo ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("signo",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // signo ::= MAS 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("signo",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento start_val = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = start_val;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser1$parser.done_parsing();
          return CUP$parser1$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

